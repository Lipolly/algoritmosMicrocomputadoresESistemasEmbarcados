;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 22/04/2015 12:08:33
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF001EFED  	GOTO        986
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_Delay_50us:
;__Lib_Delays.c,19 :: 		void Delay_50us() {
;__Lib_Delays.c,20 :: 		Delay_us(50);
0x001C	0x0E21      	MOVLW       33
0x001E	0x6E0D      	MOVWF       R13, 0
L_Delay_50us2:
0x0020	0x2E0D      	DECFSZ      R13, 1, 0
0x0022	0xD7FE      	BRA         L_Delay_50us2
;__Lib_Delays.c,21 :: 		}
L_end_Delay_50us:
0x0024	0x0012      	RETURN      0
; end of _Delay_50us
_Delay_5500us:
;__Lib_Delays.c,31 :: 		void Delay_5500us() {
;__Lib_Delays.c,32 :: 		Delay_us(5500);
0x0026	0x0E0F      	MOVLW       15
0x0028	0x6E0C      	MOVWF       R12, 0
0x002A	0x0E47      	MOVLW       71
0x002C	0x6E0D      	MOVWF       R13, 0
L_Delay_5500us5:
0x002E	0x2E0D      	DECFSZ      R13, 1, 0
0x0030	0xD7FE      	BRA         L_Delay_5500us5
0x0032	0x2E0C      	DECFSZ      R12, 1, 0
0x0034	0xD7FC      	BRA         L_Delay_5500us5
0x0036	0x0000      	NOP
0x0038	0x0000      	NOP
;__Lib_Delays.c,33 :: 		}
L_end_Delay_5500us:
0x003A	0x0012      	RETURN      0
; end of _Delay_5500us
_Delay_1us:
;__Lib_Delays.c,7 :: 		void Delay_1us() {
;__Lib_Delays.c,8 :: 		Delay_us(1);
0x003C	0x0000      	NOP
0x003E	0x0000      	NOP
;__Lib_Delays.c,9 :: 		}
L_end_Delay_1us:
0x0040	0x0012      	RETURN      0
; end of _Delay_1us
_Div_16x16_U:
;__Lib_Math.c,102 :: 		
;__Lib_Math.c,109 :: 		
0x0042	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,110 :: 		
0x0044	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,111 :: 		
0x0046	0x0E10      	MOVLW       16
;__Lib_Math.c,112 :: 		
0x0048	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,113 :: 		
0x004A	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c,114 :: 		
0x004C	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,115 :: 		
0x004E	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,116 :: 		
0x0050	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,117 :: 		
0x0052	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,118 :: 		
0x0054	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,119 :: 		
0x0056	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,120 :: 		
0x0058	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,121 :: 		
0x005A	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,122 :: 		
0x005C	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,123 :: 		
0x005E	0xD007      	BRA         $+16
;__Lib_Math.c,124 :: 		
0x0060	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,125 :: 		
0x0062	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,126 :: 		
0x0064	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,127 :: 		
0x0066	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,128 :: 		
0x0068	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,129 :: 		
0x006A	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,130 :: 		
0x006C	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c,131 :: 		
0x006E	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,132 :: 		
0x0070	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c,133 :: 		
0x0072	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,134 :: 		
0x0074	0xD7EA      	BRA         $-42
;__Lib_Math.c,136 :: 		
L_end_Div_16x16_U:
0x0076	0x0012      	RETURN      0
; end of _Div_16x16_U
_Lcd_Cmd:
;__Lib_Lcd.c,18 :: 		
;__Lib_Lcd.c,20 :: 		
0x0078	0x0100      	MOVLB       0
0x007A	0xBF60      	BTFSC       FARG_Lcd_Cmd_out_char, 7, 1
0x007C	0xD002      	BRA         L__Lcd_Cmd21
0x007E	0x9E83      	BCF         LCD_D7, BitPos(LCD_D7+0) 
0x0080	0xD001      	BRA         L__Lcd_Cmd22
L__Lcd_Cmd21:
0x0082	0x8E83      	BSF         LCD_D7, BitPos(LCD_D7+0) 
L__Lcd_Cmd22:
;__Lib_Lcd.c,21 :: 		
0x0084	0xBD60      	BTFSC       FARG_Lcd_Cmd_out_char, 6, 1
0x0086	0xD002      	BRA         L__Lcd_Cmd23
0x0088	0x9C83      	BCF         LCD_D6, BitPos(LCD_D6+0) 
0x008A	0xD001      	BRA         L__Lcd_Cmd24
L__Lcd_Cmd23:
0x008C	0x8C83      	BSF         LCD_D6, BitPos(LCD_D6+0) 
L__Lcd_Cmd24:
;__Lib_Lcd.c,22 :: 		
0x008E	0xBB60      	BTFSC       FARG_Lcd_Cmd_out_char, 5, 1
0x0090	0xD002      	BRA         L__Lcd_Cmd25
0x0092	0x9A83      	BCF         LCD_D5, BitPos(LCD_D5+0) 
0x0094	0xD001      	BRA         L__Lcd_Cmd26
L__Lcd_Cmd25:
0x0096	0x8A83      	BSF         LCD_D5, BitPos(LCD_D5+0) 
L__Lcd_Cmd26:
;__Lib_Lcd.c,23 :: 		
0x0098	0xB960      	BTFSC       FARG_Lcd_Cmd_out_char, 4, 1
0x009A	0xD002      	BRA         L__Lcd_Cmd27
0x009C	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
0x009E	0xD001      	BRA         L__Lcd_Cmd28
L__Lcd_Cmd27:
0x00A0	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
L__Lcd_Cmd28:
;__Lib_Lcd.c,25 :: 		
0x00A2	0xB052      	BTFSC       __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0) 
0x00A4	0xD002      	BRA         L__Lcd_Cmd29
0x00A6	0x8484      	BSF         LCD_RS, BitPos(LCD_RS+0) 
0x00A8	0xD001      	BRA         L__Lcd_Cmd30
L__Lcd_Cmd29:
0x00AA	0x9484      	BCF         LCD_RS, BitPos(LCD_RS+0) 
L__Lcd_Cmd30:
;__Lib_Lcd.c,28 :: 		
0x00AC	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,29 :: 		
0x00AE	0xDFC6      	RCALL       _Delay_1us
;__Lib_Lcd.c,30 :: 		
0x00B0	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,33 :: 		
0x00B2	0xB760      	BTFSC       FARG_Lcd_Cmd_out_char, 3, 1
0x00B4	0xD002      	BRA         L__Lcd_Cmd31
0x00B6	0x9E83      	BCF         LCD_D7, BitPos(LCD_D7+0) 
0x00B8	0xD001      	BRA         L__Lcd_Cmd32
L__Lcd_Cmd31:
0x00BA	0x8E83      	BSF         LCD_D7, BitPos(LCD_D7+0) 
L__Lcd_Cmd32:
;__Lib_Lcd.c,34 :: 		
0x00BC	0xB560      	BTFSC       FARG_Lcd_Cmd_out_char, 2, 1
0x00BE	0xD002      	BRA         L__Lcd_Cmd33
0x00C0	0x9C83      	BCF         LCD_D6, BitPos(LCD_D6+0) 
0x00C2	0xD001      	BRA         L__Lcd_Cmd34
L__Lcd_Cmd33:
0x00C4	0x8C83      	BSF         LCD_D6, BitPos(LCD_D6+0) 
L__Lcd_Cmd34:
;__Lib_Lcd.c,35 :: 		
0x00C6	0xB360      	BTFSC       FARG_Lcd_Cmd_out_char, 1, 1
0x00C8	0xD002      	BRA         L__Lcd_Cmd35
0x00CA	0x9A83      	BCF         LCD_D5, BitPos(LCD_D5+0) 
0x00CC	0xD001      	BRA         L__Lcd_Cmd36
L__Lcd_Cmd35:
0x00CE	0x8A83      	BSF         LCD_D5, BitPos(LCD_D5+0) 
L__Lcd_Cmd36:
;__Lib_Lcd.c,36 :: 		
0x00D0	0xB160      	BTFSC       FARG_Lcd_Cmd_out_char, 0, 1
0x00D2	0xD002      	BRA         L__Lcd_Cmd37
0x00D4	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
0x00D6	0xD001      	BRA         L__Lcd_Cmd38
L__Lcd_Cmd37:
0x00D8	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
L__Lcd_Cmd38:
;__Lib_Lcd.c,38 :: 		
0x00DA	0xB052      	BTFSC       __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0) 
0x00DC	0xD002      	BRA         L__Lcd_Cmd39
0x00DE	0x8484      	BSF         LCD_RS, BitPos(LCD_RS+0) 
0x00E0	0xD001      	BRA         L__Lcd_Cmd40
L__Lcd_Cmd39:
0x00E2	0x9484      	BCF         LCD_RS, BitPos(LCD_RS+0) 
L__Lcd_Cmd40:
;__Lib_Lcd.c,40 :: 		
0x00E4	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,41 :: 		
0x00E6	0xDFAA      	RCALL       _Delay_1us
;__Lib_Lcd.c,42 :: 		
0x00E8	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,44 :: 		
0x00EA	0xA052      	BTFSS       __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0) 
0x00EC	0xD002      	BRA         L_Lcd_Cmd0
;__Lib_Lcd.c,45 :: 		
0x00EE	0xDF9B      	RCALL       _Delay_5500us
0x00F0	0xD001      	BRA         L_Lcd_Cmd1
L_Lcd_Cmd0:
;__Lib_Lcd.c,47 :: 		
0x00F2	0xDF94      	RCALL       _Delay_50us
L_Lcd_Cmd1:
;__Lib_Lcd.c,48 :: 		
L_end_Lcd_Cmd:
0x00F4	0x0012      	RETURN      0
; end of _Lcd_Cmd
_WordToStr:
;__Lib_Conversions.c,84 :: 		
;__Lib_Conversions.c,89 :: 		
0x00F6	0x6A5D      	CLRF        WordToStr_len_L0 
L_WordToStr6:
0x00F8	0x0E05      	MOVLW       5
0x00FA	0x5C5D      	SUBWF       WordToStr_len_L0, 0 
0x00FC	0xE20B      	BC          L_WordToStr7
;__Lib_Conversions.c,90 :: 		
0x00FE	0x505D      	MOVF        WordToStr_len_L0, 0 
0x0100	0x0100      	MOVLB       0
0x0102	0x2563      	ADDWF       FARG_WordToStr_output, 0, 1
0x0104	0x6EE1      	MOVWF       FSR1L 
0x0106	0x0E00      	MOVLW       0
0x0108	0x2164      	ADDWFC      FARG_WordToStr_output+1, 0, 1
0x010A	0x6EE2      	MOVWF       FSR1H 
0x010C	0x0E20      	MOVLW       32
0x010E	0x6EE6      	MOVWF       POSTINC1 
;__Lib_Conversions.c,89 :: 		
0x0110	0x2A5D      	INCF        WordToStr_len_L0, 1 
;__Lib_Conversions.c,90 :: 		
0x0112	0xD7F2      	BRA         L_WordToStr6
L_WordToStr7:
0x0114	0x0100      	MOVLB       0
;__Lib_Conversions.c,91 :: 		
0x0116	0x505D      	MOVF        WordToStr_len_L0, 0 
0x0118	0x2563      	ADDWF       FARG_WordToStr_output, 0, 1
0x011A	0x6EE1      	MOVWF       FSR1L 
0x011C	0x0E00      	MOVLW       0
0x011E	0x2164      	ADDWFC      FARG_WordToStr_output+1, 0, 1
0x0120	0x6EE2      	MOVWF       FSR1H 
0x0122	0x6AE6      	CLRF        POSTINC1 
0x0124	0x065D      	DECF        WordToStr_len_L0, 1 
;__Lib_Conversions.c,93 :: 		
L_WordToStr9:
;__Lib_Conversions.c,94 :: 		
0x0126	0x505D      	MOVF        WordToStr_len_L0, 0 
0x0128	0x2563      	ADDWF       FARG_WordToStr_output, 0, 1
0x012A	0x6E5E      	MOVWF       FLOC__WordToStr 
0x012C	0x0E00      	MOVLW       0
0x012E	0x2164      	ADDWFC      FARG_WordToStr_output+1, 0, 1
0x0130	0x6E5F      	MOVWF       FLOC__WordToStr+1 
0x0132	0x0E0A      	MOVLW       10
0x0134	0x6E04      	MOVWF       R4 
0x0136	0x0E00      	MOVLW       0
0x0138	0x6E05      	MOVWF       R5 
0x013A	0xF000C061  	MOVFF       FARG_WordToStr_input, R0
0x013E	0xF001C062  	MOVFF       FARG_WordToStr_input+1, R1
0x0142	0xDF7F      	RCALL       _Div_16x16_U
0x0144	0xF000C008  	MOVFF       R8, R0
0x0148	0xF001C009  	MOVFF       R9, R1
0x014C	0x0E30      	MOVLW       48
0x014E	0x2600      	ADDWF       R0, 1 
0x0150	0xFFE1C05E  	MOVFF       FLOC__WordToStr, FSR1L
0x0154	0xFFE2C05F  	MOVFF       FLOC__WordToStr+1, FSR1H
0x0158	0xFFE6C000  	MOVFF       R0, POSTINC1
;__Lib_Conversions.c,95 :: 		
0x015C	0x0E0A      	MOVLW       10
0x015E	0x6E04      	MOVWF       R4 
0x0160	0x0E00      	MOVLW       0
0x0162	0x6E05      	MOVWF       R5 
0x0164	0xF000C061  	MOVFF       FARG_WordToStr_input, R0
0x0168	0xF001C062  	MOVFF       FARG_WordToStr_input+1, R1
0x016C	0xDF6A      	RCALL       _Div_16x16_U
0x016E	0xF061C000  	MOVFF       R0, FARG_WordToStr_input
0x0172	0xF062C001  	MOVFF       R1, FARG_WordToStr_input+1
;__Lib_Conversions.c,96 :: 		
0x0176	0x0E00      	MOVLW       0
0x0178	0x1801      	XORWF       R1, 0 
0x017A	0xE102      	BNZ         L__WordToStr109
0x017C	0x0E00      	MOVLW       0
0x017E	0x1800      	XORWF       R0, 0 
L__WordToStr109:
0x0180	0xE101      	BNZ         L_WordToStr11
;__Lib_Conversions.c,97 :: 		
0x0182	0xD002      	BRA         L_WordToStr10
L_WordToStr11:
;__Lib_Conversions.c,98 :: 		
0x0184	0x065D      	DECF        WordToStr_len_L0, 1 
;__Lib_Conversions.c,99 :: 		
0x0186	0xD7CF      	BRA         L_WordToStr9
L_WordToStr10:
;__Lib_Conversions.c,100 :: 		
L_end_WordToStr:
0x0188	0x0012      	RETURN      0
; end of _WordToStr
_Lcd_Chr_CP:
;__Lib_Lcd.c,50 :: 		
;__Lib_Lcd.c,52 :: 		
0x018A	0x9052      	BCF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0) 
;__Lib_Lcd.c,53 :: 		
0x018C	0xF060C05D  	MOVFF       FARG_Lcd_Chr_CP_out_char, FARG_Lcd_Cmd_out_char
0x0190	0xDF73      	RCALL       _Lcd_Cmd
;__Lib_Lcd.c,54 :: 		
0x0192	0x8052      	BSF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0) 
;__Lib_Lcd.c,55 :: 		
L_end_Lcd_Chr_CP:
0x0194	0x0012      	RETURN      0
; end of _Lcd_Chr_CP
_Lcd_Init:
;__Lib_Lcd.c,84 :: 		
;__Lib_Lcd.c,86 :: 		
0x0196	0x9296      	BCF         LCD_EN_Direction, BitPos(LCD_EN_Direction+0) 
;__Lib_Lcd.c,87 :: 		
0x0198	0x9496      	BCF         LCD_RS_Direction, BitPos(LCD_RS_Direction+0) 
;__Lib_Lcd.c,88 :: 		
0x019A	0x9895      	BCF         LCD_D4_Direction, BitPos(LCD_D4_Direction+0) 
;__Lib_Lcd.c,89 :: 		
0x019C	0x9A95      	BCF         LCD_D5_Direction, BitPos(LCD_D5_Direction+0) 
;__Lib_Lcd.c,90 :: 		
0x019E	0x9C95      	BCF         LCD_D6_Direction, BitPos(LCD_D6_Direction+0) 
;__Lib_Lcd.c,91 :: 		
0x01A0	0x9E95      	BCF         LCD_D7_Direction, BitPos(LCD_D7_Direction+0) 
;__Lib_Lcd.c,93 :: 		
0x01A2	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,94 :: 		
0x01A4	0x9484      	BCF         LCD_RS, BitPos(LCD_RS+0) 
;__Lib_Lcd.c,95 :: 		
0x01A6	0x9E83      	BCF         LCD_D7, BitPos(LCD_D7+0) 
;__Lib_Lcd.c,96 :: 		
0x01A8	0x9C83      	BCF         LCD_D6, BitPos(LCD_D6+0) 
;__Lib_Lcd.c,97 :: 		
0x01AA	0x9A83      	BCF         LCD_D5, BitPos(LCD_D5+0) 
;__Lib_Lcd.c,98 :: 		
0x01AC	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,100 :: 		
0x01AE	0xDF3B      	RCALL       _Delay_5500us
;__Lib_Lcd.c,101 :: 		
0x01B0	0xDF3A      	RCALL       _Delay_5500us
;__Lib_Lcd.c,102 :: 		
0x01B2	0xDF39      	RCALL       _Delay_5500us
;__Lib_Lcd.c,105 :: 		
0x01B4	0x8A83      	BSF         LCD_D5, BitPos(LCD_D5+0) 
;__Lib_Lcd.c,106 :: 		
0x01B6	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,107 :: 		
0x01B8	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,108 :: 		
0x01BA	0xDF40      	RCALL       _Delay_1us
;__Lib_Lcd.c,109 :: 		
0x01BC	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,110 :: 		
0x01BE	0xDF33      	RCALL       _Delay_5500us
;__Lib_Lcd.c,112 :: 		
0x01C0	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,113 :: 		
0x01C2	0xDF3C      	RCALL       _Delay_1us
;__Lib_Lcd.c,114 :: 		
0x01C4	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,115 :: 		
0x01C6	0xDF2F      	RCALL       _Delay_5500us
;__Lib_Lcd.c,117 :: 		
0x01C8	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,118 :: 		
0x01CA	0xDF38      	RCALL       _Delay_1us
;__Lib_Lcd.c,119 :: 		
0x01CC	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,120 :: 		
0x01CE	0xDF2B      	RCALL       _Delay_5500us
;__Lib_Lcd.c,123 :: 		
0x01D0	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,124 :: 		
0x01D2	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,125 :: 		
0x01D4	0xDF33      	RCALL       _Delay_1us
;__Lib_Lcd.c,126 :: 		
0x01D6	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,127 :: 		
0x01D8	0xDF26      	RCALL       _Delay_5500us
;__Lib_Lcd.c,130 :: 		
0x01DA	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,131 :: 		
0x01DC	0xDF2F      	RCALL       _Delay_1us
;__Lib_Lcd.c,132 :: 		
0x01DE	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,134 :: 		
0x01E0	0x9A83      	BCF         LCD_D5, BitPos(LCD_D5+0) 
;__Lib_Lcd.c,135 :: 		
0x01E2	0x8E83      	BSF         LCD_D7, BitPos(LCD_D7+0) 
;__Lib_Lcd.c,136 :: 		
0x01E4	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,137 :: 		
0x01E6	0xDF2A      	RCALL       _Delay_1us
;__Lib_Lcd.c,138 :: 		
0x01E8	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,139 :: 		
0x01EA	0xDF1D      	RCALL       _Delay_5500us
;__Lib_Lcd.c,142 :: 		
0x01EC	0x9E83      	BCF         LCD_D7, BitPos(LCD_D7+0) 
;__Lib_Lcd.c,143 :: 		
0x01EE	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,144 :: 		
0x01F0	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,145 :: 		
0x01F2	0xDF24      	RCALL       _Delay_1us
;__Lib_Lcd.c,146 :: 		
0x01F4	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,148 :: 		
0x01F6	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,149 :: 		
0x01F8	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,150 :: 		
0x01FA	0xDF20      	RCALL       _Delay_1us
;__Lib_Lcd.c,151 :: 		
0x01FC	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,152 :: 		
0x01FE	0xDF13      	RCALL       _Delay_5500us
;__Lib_Lcd.c,155 :: 		
0x0200	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,156 :: 		
0x0202	0xDF1C      	RCALL       _Delay_1us
;__Lib_Lcd.c,157 :: 		
0x0204	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,159 :: 		
0x0206	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,160 :: 		
0x0208	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,161 :: 		
0x020A	0xDF18      	RCALL       _Delay_1us
;__Lib_Lcd.c,162 :: 		
0x020C	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,163 :: 		
0x020E	0xDF0B      	RCALL       _Delay_5500us
;__Lib_Lcd.c,166 :: 		
0x0210	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,167 :: 		
0x0212	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,168 :: 		
0x0214	0xDF13      	RCALL       _Delay_1us
;__Lib_Lcd.c,169 :: 		
0x0216	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,171 :: 		
0x0218	0x8E83      	BSF         LCD_D7, BitPos(LCD_D7+0) 
;__Lib_Lcd.c,172 :: 		
0x021A	0x8C83      	BSF         LCD_D6, BitPos(LCD_D6+0) 
;__Lib_Lcd.c,173 :: 		
0x021C	0x8A83      	BSF         LCD_D5, BitPos(LCD_D5+0) 
;__Lib_Lcd.c,174 :: 		
0x021E	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,175 :: 		
0x0220	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,176 :: 		
0x0222	0xDF0C      	RCALL       _Delay_1us
;__Lib_Lcd.c,177 :: 		
0x0224	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,179 :: 		
0x0226	0xDEFF      	RCALL       _Delay_5500us
;__Lib_Lcd.c,181 :: 		
0x0228	0x8052      	BSF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0) 
;__Lib_Lcd.c,182 :: 		
L_end_Lcd_Init:
0x022A	0x0012      	RETURN      0
; end of _Lcd_Init
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x022C	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x022E	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0232	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0234	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0236	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0238	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x023A	0x0012      	RETURN      0
; end of ___CC2DW
_Lcd_Out:
;__Lib_Lcd.c,184 :: 		
;__Lib_Lcd.c,187 :: 		
0x023C	0xD00F      	BRA         L_Lcd_Out11
;__Lib_Lcd.c,188 :: 		
L_Lcd_Out13:
0x023E	0x0E80      	MOVLW       128
0x0240	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x0242	0xD019      	BRA         L_Lcd_Out12
;__Lib_Lcd.c,189 :: 		
L_Lcd_Out14:
0x0244	0x0EC0      	MOVLW       192
0x0246	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x0248	0xD016      	BRA         L_Lcd_Out12
;__Lib_Lcd.c,190 :: 		
L_Lcd_Out15:
0x024A	0x0E94      	MOVLW       148
0x024C	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x024E	0xD013      	BRA         L_Lcd_Out12
;__Lib_Lcd.c,191 :: 		
L_Lcd_Out16:
0x0250	0x0ED4      	MOVLW       212
0x0252	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x0254	0xD010      	BRA         L_Lcd_Out12
;__Lib_Lcd.c,192 :: 		
L_Lcd_Out17:
0x0256	0x0E80      	MOVLW       128
0x0258	0x6E53      	MOVWF       FARG_Lcd_Out_row 
;__Lib_Lcd.c,193 :: 		
0x025A	0xD00D      	BRA         L_Lcd_Out12
L_Lcd_Out11:
0x025C	0x5053      	MOVF        FARG_Lcd_Out_row, 0 
0x025E	0x0A01      	XORLW       1
0x0260	0xE0EE      	BZ          L_Lcd_Out13
0x0262	0x5053      	MOVF        FARG_Lcd_Out_row, 0 
0x0264	0x0A02      	XORLW       2
0x0266	0xE0EE      	BZ          L_Lcd_Out14
0x0268	0x5053      	MOVF        FARG_Lcd_Out_row, 0 
0x026A	0x0A03      	XORLW       3
0x026C	0xE0EE      	BZ          L_Lcd_Out15
0x026E	0x5053      	MOVF        FARG_Lcd_Out_row, 0 
0x0270	0x0A04      	XORLW       4
0x0272	0xE0EE      	BZ          L_Lcd_Out16
0x0274	0xD7F0      	BRA         L_Lcd_Out17
L_Lcd_Out12:
;__Lib_Lcd.c,194 :: 		
0x0276	0x0454      	DECF        FARG_Lcd_Out_column, 0 
0x0278	0x6E00      	MOVWF       R0 
0x027A	0x5053      	MOVF        FARG_Lcd_Out_row, 0 
0x027C	0x2600      	ADDWF       R0, 1 
0x027E	0xF053C000  	MOVFF       R0, FARG_Lcd_Out_row
;__Lib_Lcd.c,196 :: 		
0x0282	0xF060C000  	MOVFF       R0, FARG_Lcd_Cmd_out_char
0x0286	0xDEF8      	RCALL       _Lcd_Cmd
;__Lib_Lcd.c,197 :: 		
0x0288	0x9052      	BCF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0) 
;__Lib_Lcd.c,198 :: 		
0x028A	0x6A57      	CLRF        Lcd_Out_i_L0 
;__Lib_Lcd.c,199 :: 		
L_Lcd_Out18:
0x028C	0x5057      	MOVF        Lcd_Out_i_L0, 0 
0x028E	0x2455      	ADDWF       FARG_Lcd_Out_text, 0 
0x0290	0x6EE9      	MOVWF       FSR0L 
0x0292	0x0E00      	MOVLW       0
0x0294	0x2056      	ADDWFC      FARG_Lcd_Out_text+1, 0 
0x0296	0x6EEA      	MOVWF       FSR0H 
0x0298	0x52EE      	MOVF        POSTINC0, 1 
0x029A	0xE00B      	BZ          L_Lcd_Out19
;__Lib_Lcd.c,200 :: 		
0x029C	0x5057      	MOVF        Lcd_Out_i_L0, 0 
0x029E	0x2455      	ADDWF       FARG_Lcd_Out_text, 0 
0x02A0	0x6EE9      	MOVWF       FSR0L 
0x02A2	0x0E00      	MOVLW       0
0x02A4	0x2056      	ADDWFC      FARG_Lcd_Out_text+1, 0 
0x02A6	0x6EEA      	MOVWF       FSR0H 
0x02A8	0xF05DCFEE  	MOVFF       POSTINC0, FARG_Lcd_Chr_CP_out_char
0x02AC	0xDF6E      	RCALL       _Lcd_Chr_CP
0x02AE	0x2A57      	INCF        Lcd_Out_i_L0, 1 
0x02B0	0xD7ED      	BRA         L_Lcd_Out18
L_Lcd_Out19:
;__Lib_Lcd.c,201 :: 		
0x02B2	0x8052      	BSF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0) 
;__Lib_Lcd.c,202 :: 		
L_end_Lcd_Out:
0x02B4	0x0012      	RETURN      0
; end of _Lcd_Out
_TrimLeft:
;Temporizador.c,3 :: 		void TrimLeft(char *str) {
;Temporizador.c,4 :: 		char count  = 1;
0x02B6	0x0E01      	MOVLW       1
0x02B8	0x6E55      	MOVWF       TrimLeft_count_L0 
;Temporizador.c,5 :: 		while (*str++ != 0) {
L_TrimLeft0:
0x02BA	0xF001C053  	MOVFF       FARG_TrimLeft_str, R1
0x02BE	0xF002C054  	MOVFF       FARG_TrimLeft_str+1, R2
0x02C2	0x4A53      	INFSNZ      FARG_TrimLeft_str, 1 
0x02C4	0x2A54      	INCF        FARG_TrimLeft_str+1, 1 
0x02C6	0xFFE9C001  	MOVFF       R1, FSR0L
0x02CA	0xFFEAC002  	MOVFF       R2, FSR0H
0x02CE	0x50EE      	MOVF        POSTINC0, 0 
0x02D0	0x0A00      	XORLW       0
0x02D2	0xE016      	BZ          L_TrimLeft1
;Temporizador.c,6 :: 		if (*str != 32) {
0x02D4	0xFFE9C053  	MOVFF       FARG_TrimLeft_str, FSR0L
0x02D8	0xFFEAC054  	MOVFF       FARG_TrimLeft_str+1, FSR0H
0x02DC	0x50EE      	MOVF        POSTINC0, 0 
0x02DE	0x0A20      	XORLW       32
0x02E0	0xE00D      	BZ          L_TrimLeft2
;Temporizador.c,7 :: 		*(str - count--) = *str;
0x02E2	0x5055      	MOVF        TrimLeft_count_L0, 0 
0x02E4	0x5C53      	SUBWF       FARG_TrimLeft_str, 0 
0x02E6	0x6EE1      	MOVWF       FSR1L 
0x02E8	0x0E00      	MOVLW       0
0x02EA	0x5854      	SUBWFB      FARG_TrimLeft_str+1, 0 
0x02EC	0x6EE2      	MOVWF       FSR1H 
0x02EE	0xFFE9C053  	MOVFF       FARG_TrimLeft_str, FSR0L
0x02F2	0xFFEAC054  	MOVFF       FARG_TrimLeft_str+1, FSR0H
0x02F6	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
0x02FA	0x0655      	DECF        TrimLeft_count_L0, 1 
;Temporizador.c,8 :: 		}
L_TrimLeft2:
;Temporizador.c,9 :: 		count++;
0x02FC	0x2A55      	INCF        TrimLeft_count_L0, 1 
;Temporizador.c,10 :: 		}
0x02FE	0xD7DD      	BRA         L_TrimLeft0
L_TrimLeft1:
;Temporizador.c,11 :: 		}
L_end_TrimLeft:
0x0300	0x0012      	RETURN      0
; end of _TrimLeft
_IntToStr:
;__Lib_Conversions.c,146 :: 		
;__Lib_Conversions.c,152 :: 		
0x0302	0x6A59      	CLRF        IntToStr_negative_L0 
0x0304	0x6A5A      	CLRF        IntToStr_negative_L0+1 
;__Lib_Conversions.c,153 :: 		
0x0306	0xF05BC053  	MOVFF       FARG_IntToStr_input, IntToStr_inword_L0
0x030A	0xF05CC054  	MOVFF       FARG_IntToStr_input+1, IntToStr_inword_L0+1
;__Lib_Conversions.c,154 :: 		
0x030E	0x0E80      	MOVLW       128
0x0310	0x1854      	XORWF       FARG_IntToStr_input+1, 0 
0x0312	0x6E00      	MOVWF       R0 
0x0314	0x0E80      	MOVLW       128
0x0316	0x5C00      	SUBWF       R0, 0 
0x0318	0xE102      	BNZ         L__IntToStr115
0x031A	0x0E00      	MOVLW       0
0x031C	0x5C53      	SUBWF       FARG_IntToStr_input, 0 
L__IntToStr115:
0x031E	0xE20B      	BC          L_IntToStr23
;__Lib_Conversions.c,155 :: 		
0x0320	0x0E01      	MOVLW       1
0x0322	0x6E59      	MOVWF       IntToStr_negative_L0 
0x0324	0x0E00      	MOVLW       0
0x0326	0x6E5A      	MOVWF       IntToStr_negative_L0+1 
;__Lib_Conversions.c,156 :: 		
0x0328	0x5053      	MOVF        FARG_IntToStr_input, 0 
0x032A	0x0800      	SUBLW       0
0x032C	0x6E5B      	MOVWF       IntToStr_inword_L0 
0x032E	0xF05CC054  	MOVFF       FARG_IntToStr_input+1, IntToStr_inword_L0+1
0x0332	0x0E00      	MOVLW       0
0x0334	0x565C      	SUBFWB      IntToStr_inword_L0+1, 1 
;__Lib_Conversions.c,157 :: 		
L_IntToStr23:
;__Lib_Conversions.c,158 :: 		
0x0336	0xF061C05B  	MOVFF       IntToStr_inword_L0, FARG_WordToStr_input
0x033A	0xF062C05C  	MOVFF       IntToStr_inword_L0+1, FARG_WordToStr_input+1
0x033E	0xF063C055  	MOVFF       FARG_IntToStr_output, FARG_WordToStr_output
0x0342	0xF064C056  	MOVFF       FARG_IntToStr_output+1, FARG_WordToStr_output+1
0x0346	0xDED7      	RCALL       _WordToStr
;__Lib_Conversions.c,160 :: 		
0x0348	0x0E06      	MOVLW       6
0x034A	0x6E57      	MOVWF       IntToStr_i_L0 
0x034C	0x0E00      	MOVLW       0
0x034E	0x6E58      	MOVWF       IntToStr_i_L0+1 
;__Lib_Conversions.c,161 :: 		
L_IntToStr24:
0x0350	0x0E00      	MOVLW       0
0x0352	0x6E00      	MOVWF       R0 
0x0354	0x5058      	MOVF        IntToStr_i_L0+1, 0 
0x0356	0x5C00      	SUBWF       R0, 0 
0x0358	0xE102      	BNZ         L__IntToStr116
0x035A	0x5057      	MOVF        IntToStr_i_L0, 0 
0x035C	0x0800      	SUBLW       0
L__IntToStr116:
0x035E	0xE219      	BC          L_IntToStr25
;__Lib_Conversions.c,162 :: 		
0x0360	0x5057      	MOVF        IntToStr_i_L0, 0 
0x0362	0x2455      	ADDWF       FARG_IntToStr_output, 0 
0x0364	0x6EE1      	MOVWF       FSR1L 
0x0366	0x5058      	MOVF        IntToStr_i_L0+1, 0 
0x0368	0x2056      	ADDWFC      FARG_IntToStr_output+1, 0 
0x036A	0x6EE2      	MOVWF       FSR1H 
0x036C	0x0E01      	MOVLW       1
0x036E	0x5C57      	SUBWF       IntToStr_i_L0, 0 
0x0370	0x6E00      	MOVWF       R0 
0x0372	0x0E00      	MOVLW       0
0x0374	0x5858      	SUBWFB      IntToStr_i_L0+1, 0 
0x0376	0x6E01      	MOVWF       R1 
0x0378	0x5000      	MOVF        R0, 0 
0x037A	0x2455      	ADDWF       FARG_IntToStr_output, 0 
0x037C	0x6EE9      	MOVWF       FSR0L 
0x037E	0x5001      	MOVF        R1, 0 
0x0380	0x2056      	ADDWFC      FARG_IntToStr_output+1, 0 
0x0382	0x6EEA      	MOVWF       FSR0H 
0x0384	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;__Lib_Conversions.c,163 :: 		
0x0388	0x0E01      	MOVLW       1
0x038A	0x5E57      	SUBWF       IntToStr_i_L0, 1 
0x038C	0x0E00      	MOVLW       0
0x038E	0x5A58      	SUBWFB      IntToStr_i_L0+1, 1 
;__Lib_Conversions.c,164 :: 		
0x0390	0xD7DF      	BRA         L_IntToStr24
L_IntToStr25:
;__Lib_Conversions.c,165 :: 		
0x0392	0xFFE1C055  	MOVFF       FARG_IntToStr_output, FSR1L
0x0396	0xFFE2C056  	MOVFF       FARG_IntToStr_output+1, FSR1H
0x039A	0x0E20      	MOVLW       32
0x039C	0x6EE6      	MOVWF       POSTINC1 
;__Lib_Conversions.c,166 :: 		
0x039E	0x5059      	MOVF        IntToStr_negative_L0, 0 
0x03A0	0x105A      	IORWF       IntToStr_negative_L0+1, 0 
0x03A2	0xE01A      	BZ          L_IntToStr26
;__Lib_Conversions.c,167 :: 		
0x03A4	0x6A57      	CLRF        IntToStr_i_L0 
0x03A6	0x6A58      	CLRF        IntToStr_i_L0+1 
;__Lib_Conversions.c,168 :: 		
L_IntToStr27:
0x03A8	0x5057      	MOVF        IntToStr_i_L0, 0 
0x03AA	0x2455      	ADDWF       FARG_IntToStr_output, 0 
0x03AC	0x6EE9      	MOVWF       FSR0L 
0x03AE	0x5058      	MOVF        IntToStr_i_L0+1, 0 
0x03B0	0x2056      	ADDWFC      FARG_IntToStr_output+1, 0 
0x03B2	0x6EEA      	MOVWF       FSR0H 
0x03B4	0x50EE      	MOVF        POSTINC0, 0 
0x03B6	0x0A20      	XORLW       32
0x03B8	0xE103      	BNZ         L_IntToStr28
0x03BA	0x4A57      	INFSNZ      IntToStr_i_L0, 1 
0x03BC	0x2A58      	INCF        IntToStr_i_L0+1, 1 
0x03BE	0xD7F4      	BRA         L_IntToStr27
L_IntToStr28:
;__Lib_Conversions.c,169 :: 		
0x03C0	0x0E01      	MOVLW       1
0x03C2	0x5E57      	SUBWF       IntToStr_i_L0, 1 
0x03C4	0x0E00      	MOVLW       0
0x03C6	0x5A58      	SUBWFB      IntToStr_i_L0+1, 1 
;__Lib_Conversions.c,170 :: 		
0x03C8	0x5057      	MOVF        IntToStr_i_L0, 0 
0x03CA	0x2455      	ADDWF       FARG_IntToStr_output, 0 
0x03CC	0x6EE1      	MOVWF       FSR1L 
0x03CE	0x5058      	MOVF        IntToStr_i_L0+1, 0 
0x03D0	0x2056      	ADDWFC      FARG_IntToStr_output+1, 0 
0x03D2	0x6EE2      	MOVWF       FSR1H 
0x03D4	0x0E2D      	MOVLW       45
0x03D6	0x6EE6      	MOVWF       POSTINC1 
L_IntToStr26:
;__Lib_Conversions.c,171 :: 		
L_end_IntToStr:
0x03D8	0x0012      	RETURN      0
; end of _IntToStr
_main:
0x03DA	0xF004EC66  	CALL        2252, 0
;Temporizador.c,39 :: 		void main(){
;Temporizador.c,41 :: 		flag1 = -1;
0x03DE	0x0EFF      	MOVLW       255
0x03E0	0x6E47      	MOVWF       _flag1 
0x03E2	0x0EFF      	MOVLW       255
0x03E4	0x6E48      	MOVWF       _flag1+1 
;Temporizador.c,42 :: 		trisb = 7;          // Configura todos pinos das portas para digital e
0x03E6	0x0E07      	MOVLW       7
0x03E8	0x6E93      	MOVWF       TRISB 
;Temporizador.c,43 :: 		ADCON1  = 0x0F;     // desabilita o conversor A/D
0x03EA	0x0E0F      	MOVLW       15
0x03EC	0x6EC1      	MOVWF       ADCON1 
;Temporizador.c,46 :: 		Lcd_Init();                      //Inicializa o Display
0x03EE	0xDED3      	RCALL       _Lcd_Init
;Temporizador.c,47 :: 		Lcd_Cmd(_LCD_CLEAR);             //Limpa o Display
0x03F0	0x0E01      	MOVLW       1
0x03F2	0x0100      	MOVLB       0
0x03F4	0x6F60      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x03F6	0xDE40      	RCALL       _Lcd_Cmd
;Temporizador.c,48 :: 		Lcd_Cmd(_LCD_CURSOR_OFF);        //Desabilita o cursor
0x03F8	0x0E0C      	MOVLW       12
0x03FA	0x6F60      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x03FC	0xDE3D      	RCALL       _Lcd_Cmd
;Temporizador.c,49 :: 		trisc.rc0 = 0;
0x03FE	0x9094      	BCF         TRISC, 0 
;Temporizador.c,50 :: 		portc.rc0 = 0;
0x0400	0x9082      	BCF         PORTC, 0 
;Temporizador.c,53 :: 		Lcd_Out(1,3,":");
0x0402	0x0E01      	MOVLW       1
0x0404	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x0406	0x0E03      	MOVLW       3
0x0408	0x6E54      	MOVWF       FARG_Lcd_Out_column 
0x040A	0x0E1A      	MOVLW       ?lstr1_Temporizador
0x040C	0x6E55      	MOVWF       FARG_Lcd_Out_text 
0x040E	0x0E00      	MOVLW       hi_addr(?lstr1_Temporizador)
0x0410	0x6E56      	MOVWF       FARG_Lcd_Out_text+1 
0x0412	0xDF14      	RCALL       _Lcd_Out
;Temporizador.c,54 :: 		Lcd_Out(1,6,":");
0x0414	0x0E01      	MOVLW       1
0x0416	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x0418	0x0E06      	MOVLW       6
0x041A	0x6E54      	MOVWF       FARG_Lcd_Out_column 
0x041C	0x0E1C      	MOVLW       ?lstr2_Temporizador
0x041E	0x6E55      	MOVWF       FARG_Lcd_Out_text 
0x0420	0x0E00      	MOVLW       hi_addr(?lstr2_Temporizador)
0x0422	0x6E56      	MOVWF       FARG_Lcd_Out_text+1 
0x0424	0xDF0B      	RCALL       _Lcd_Out
;Temporizador.c,56 :: 		while(flag1==-1){ // WHILE que segura o temporizador em modo de configuracao ate que o flag seja estourado
L_main3:
0x0426	0x0EFF      	MOVLW       255
0x0428	0x1848      	XORWF       _flag1+1, 0 
0x042A	0xE102      	BNZ         L__main48
0x042C	0x0EFF      	MOVLW       255
0x042E	0x1847      	XORWF       _flag1, 0 
L__main48:
0x0430	0xA4D8      	BTFSS       STATUS, 2 
0x0432	0xD143      	BRA         L_main4
;Temporizador.c,58 :: 		for(h=0;h<24;h++){    // For loop para contar as horas
0x0434	0x6A50      	CLRF        _h 
0x0436	0x6A51      	CLRF        _h+1 
L_main5:
0x0438	0x0E80      	MOVLW       128
0x043A	0x1851      	XORWF       _h+1, 0 
0x043C	0x6E00      	MOVWF       R0 
0x043E	0x0E80      	MOVLW       128
0x0440	0x5C00      	SUBWF       R0, 0 
0x0442	0xE102      	BNZ         L__main49
0x0444	0x0E18      	MOVLW       24
0x0446	0x5C50      	SUBWF       _h, 0 
L__main49:
0x0448	0xB0D8      	BTFSC       STATUS, 0 
0x044A	0xD12D      	BRA         L_main6
;Temporizador.c,59 :: 		inttostr(h,txtH);     // Converte o inteiro hora para string e salva no char relativo a hora
0x044C	0xF053C050  	MOVFF       _h, FARG_IntToStr_input
0x0450	0xF054C051  	MOVFF       _h+1, FARG_IntToStr_input+1
0x0454	0x0E49      	MOVLW       _txtH
0x0456	0x6E55      	MOVWF       FARG_IntToStr_output 
0x0458	0x0E00      	MOVLW       hi_addr(_txtH)
0x045A	0x6E56      	MOVWF       FARG_IntToStr_output+1 
0x045C	0xDF52      	RCALL       _IntToStr
;Temporizador.c,60 :: 		TrimLeft(txtH);       // Uso da funcao TrimLeft
0x045E	0x0E49      	MOVLW       _txtH
0x0460	0x6E53      	MOVWF       FARG_TrimLeft_str 
0x0462	0x0E00      	MOVLW       hi_addr(_txtH)
0x0464	0x6E54      	MOVWF       FARG_TrimLeft_str+1 
0x0466	0xDF27      	RCALL       _TrimLeft
;Temporizador.c,61 :: 		Lcd_Out(1,1,txtH);    // Escreve as horas no LCD
0x0468	0x0E01      	MOVLW       1
0x046A	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x046C	0x0E01      	MOVLW       1
0x046E	0x6E54      	MOVWF       FARG_Lcd_Out_column 
0x0470	0x0E49      	MOVLW       _txtH
0x0472	0x6E55      	MOVWF       FARG_Lcd_Out_text 
0x0474	0x0E00      	MOVLW       hi_addr(_txtH)
0x0476	0x6E56      	MOVWF       FARG_Lcd_Out_text+1 
0x0478	0xDEE1      	RCALL       _Lcd_Out
;Temporizador.c,62 :: 		for(m=0;m<60;m++){   // For loop para contar os minutos
0x047A	0x6A45      	CLRF        _m 
0x047C	0x6A46      	CLRF        _m+1 
L_main8:
0x047E	0x0E80      	MOVLW       128
0x0480	0x1846      	XORWF       _m+1, 0 
0x0482	0x6E00      	MOVWF       R0 
0x0484	0x0E80      	MOVLW       128
0x0486	0x5C00      	SUBWF       R0, 0 
0x0488	0xE102      	BNZ         L__main50
0x048A	0x0E3C      	MOVLW       60
0x048C	0x5C45      	SUBWF       _m, 0 
L__main50:
0x048E	0xB0D8      	BTFSC       STATUS, 0 
0x0490	0xD0F7      	BRA         L_main9
;Temporizador.c,63 :: 		inttostr(m,txtM);    // Converte o inteiro minuto para string e salva no char relativo ao minuto
0x0492	0xF053C045  	MOVFF       _m, FARG_IntToStr_input
0x0496	0xF054C046  	MOVFF       _m+1, FARG_IntToStr_input+1
0x049A	0x0E37      	MOVLW       _txtM
0x049C	0x6E55      	MOVWF       FARG_IntToStr_output 
0x049E	0x0E00      	MOVLW       hi_addr(_txtM)
0x04A0	0x6E56      	MOVWF       FARG_IntToStr_output+1 
0x04A2	0xDF2F      	RCALL       _IntToStr
;Temporizador.c,64 :: 		TrimLeft(txtM);      // Uso da funcao TrimLeft
0x04A4	0x0E37      	MOVLW       _txtM
0x04A6	0x6E53      	MOVWF       FARG_TrimLeft_str 
0x04A8	0x0E00      	MOVLW       hi_addr(_txtM)
0x04AA	0x6E54      	MOVWF       FARG_TrimLeft_str+1 
0x04AC	0xDF04      	RCALL       _TrimLeft
;Temporizador.c,65 :: 		Lcd_Out(1,4,txtM);   // Escreve os minutos no LCD
0x04AE	0x0E01      	MOVLW       1
0x04B0	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x04B2	0x0E04      	MOVLW       4
0x04B4	0x6E54      	MOVWF       FARG_Lcd_Out_column 
0x04B6	0x0E37      	MOVLW       _txtM
0x04B8	0x6E55      	MOVWF       FARG_Lcd_Out_text 
0x04BA	0x0E00      	MOVLW       hi_addr(_txtM)
0x04BC	0x6E56      	MOVWF       FARG_Lcd_Out_text+1 
0x04BE	0xDEBE      	RCALL       _Lcd_Out
;Temporizador.c,66 :: 		for(seg=0;seg<60;seg++){   //For loop para contar os segundos
0x04C0	0x6A35      	CLRF        _seg 
0x04C2	0x6A36      	CLRF        _seg+1 
L_main11:
0x04C4	0x0E80      	MOVLW       128
0x04C6	0x1836      	XORWF       _seg+1, 0 
0x04C8	0x6E00      	MOVWF       R0 
0x04CA	0x0E80      	MOVLW       128
0x04CC	0x5C00      	SUBWF       R0, 0 
0x04CE	0xE102      	BNZ         L__main51
0x04D0	0x0E3C      	MOVLW       60
0x04D2	0x5C35      	SUBWF       _seg, 0 
L__main51:
0x04D4	0xB0D8      	BTFSC       STATUS, 0 
0x04D6	0xD0C1      	BRA         L_main12
;Temporizador.c,67 :: 		inttostr(seg,txtS);        // Converte o inteiro segundo para string e salva no char relativo ao segundo
0x04D8	0xF053C035  	MOVFF       _seg, FARG_IntToStr_input
0x04DC	0xF054C036  	MOVFF       _seg+1, FARG_IntToStr_input+1
0x04E0	0x0E3E      	MOVLW       _txtS
0x04E2	0x6E55      	MOVWF       FARG_IntToStr_output 
0x04E4	0x0E00      	MOVLW       hi_addr(_txtS)
0x04E6	0x6E56      	MOVWF       FARG_IntToStr_output+1 
0x04E8	0xDF0C      	RCALL       _IntToStr
;Temporizador.c,68 :: 		TrimLeft(txtS);            // Uso da funcao TrimLeft
0x04EA	0x0E3E      	MOVLW       _txtS
0x04EC	0x6E53      	MOVWF       FARG_TrimLeft_str 
0x04EE	0x0E00      	MOVLW       hi_addr(_txtS)
0x04F0	0x6E54      	MOVWF       FARG_TrimLeft_str+1 
0x04F2	0xDEE1      	RCALL       _TrimLeft
;Temporizador.c,69 :: 		Lcd_Out(1,7,txtS);         // Escreve os segundos no LCD
0x04F4	0x0E01      	MOVLW       1
0x04F6	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x04F8	0x0E07      	MOVLW       7
0x04FA	0x6E54      	MOVWF       FARG_Lcd_Out_column 
0x04FC	0x0E3E      	MOVLW       _txtS
0x04FE	0x6E55      	MOVWF       FARG_Lcd_Out_text 
0x0500	0x0E00      	MOVLW       hi_addr(_txtS)
0x0502	0x6E56      	MOVWF       FARG_Lcd_Out_text+1 
0x0504	0xDE9B      	RCALL       _Lcd_Out
;Temporizador.c,70 :: 		while (portb.b0 == 1){ // Enquanto Rb0 nao esta acionado, o programa busca a incrementacao de horas e minutos, os segundos
L_main14:
0x0506	0xA081      	BTFSS       PORTB, 0 
0x0508	0xD090      	BRA         L_main15
;Temporizador.c,73 :: 		while (portb.b1 == 0){  //WHILE utilizado para somar os minutos
L_main16:
0x050A	0xB281      	BTFSC       PORTB, 1 
0x050C	0xD042      	BRA         L_main17
;Temporizador.c,74 :: 		m++;
0x050E	0x4A45      	INFSNZ      _m, 1 
0x0510	0x2A46      	INCF        _m+1, 1 
;Temporizador.c,75 :: 		delay_ms(500);
0x0512	0x0E06      	MOVLW       6
0x0514	0x6E0B      	MOVWF       R11, 0
0x0516	0x0E13      	MOVLW       19
0x0518	0x6E0C      	MOVWF       R12, 0
0x051A	0x0EAD      	MOVLW       173
0x051C	0x6E0D      	MOVWF       R13, 0
L_main18:
0x051E	0x2E0D      	DECFSZ      R13, 1, 0
0x0520	0xD7FE      	BRA         L_main18
0x0522	0x2E0C      	DECFSZ      R12, 1, 0
0x0524	0xD7FC      	BRA         L_main18
0x0526	0x2E0B      	DECFSZ      R11, 1, 0
0x0528	0xD7FA      	BRA         L_main18
0x052A	0x0000      	NOP
0x052C	0x0000      	NOP
;Temporizador.c,76 :: 		inttostr(m,txtM);
0x052E	0xF053C045  	MOVFF       _m, FARG_IntToStr_input
0x0532	0xF054C046  	MOVFF       _m+1, FARG_IntToStr_input+1
0x0536	0x0E37      	MOVLW       _txtM
0x0538	0x6E55      	MOVWF       FARG_IntToStr_output 
0x053A	0x0E00      	MOVLW       hi_addr(_txtM)
0x053C	0x6E56      	MOVWF       FARG_IntToStr_output+1 
0x053E	0xDEE1      	RCALL       _IntToStr
;Temporizador.c,77 :: 		TrimLeft(txtM);
0x0540	0x0E37      	MOVLW       _txtM
0x0542	0x6E53      	MOVWF       FARG_TrimLeft_str 
0x0544	0x0E00      	MOVLW       hi_addr(_txtM)
0x0546	0x6E54      	MOVWF       FARG_TrimLeft_str+1 
0x0548	0xDEB6      	RCALL       _TrimLeft
;Temporizador.c,78 :: 		Lcd_Out(1,4,txtM);
0x054A	0x0E01      	MOVLW       1
0x054C	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x054E	0x0E04      	MOVLW       4
0x0550	0x6E54      	MOVWF       FARG_Lcd_Out_column 
0x0552	0x0E37      	MOVLW       _txtM
0x0554	0x6E55      	MOVWF       FARG_Lcd_Out_text 
0x0556	0x0E00      	MOVLW       hi_addr(_txtM)
0x0558	0x6E56      	MOVWF       FARG_Lcd_Out_text+1 
0x055A	0xDE70      	RCALL       _Lcd_Out
;Temporizador.c,81 :: 		if (m==60){
0x055C	0x0E00      	MOVLW       0
0x055E	0x1846      	XORWF       _m+1, 0 
0x0560	0xE102      	BNZ         L__main52
0x0562	0x0E3C      	MOVLW       60
0x0564	0x1845      	XORWF       _m, 0 
L__main52:
0x0566	0xE114      	BNZ         L_main19
;Temporizador.c,82 :: 		m = 0;
0x0568	0x6A45      	CLRF        _m 
0x056A	0x6A46      	CLRF        _m+1 
;Temporizador.c,83 :: 		Lcd_Out(1,4,"  ");
0x056C	0x0E01      	MOVLW       1
0x056E	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x0570	0x0E04      	MOVLW       4
0x0572	0x6E54      	MOVWF       FARG_Lcd_Out_column 
0x0574	0x0E17      	MOVLW       ?lstr3_Temporizador
0x0576	0x6E55      	MOVWF       FARG_Lcd_Out_text 
0x0578	0x0E00      	MOVLW       hi_addr(?lstr3_Temporizador)
0x057A	0x6E56      	MOVWF       FARG_Lcd_Out_text+1 
0x057C	0xDE5F      	RCALL       _Lcd_Out
;Temporizador.c,84 :: 		Lcd_Out(1,4,"0");
0x057E	0x0E01      	MOVLW       1
0x0580	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x0582	0x0E04      	MOVLW       4
0x0584	0x6E54      	MOVWF       FARG_Lcd_Out_column 
0x0586	0x0E15      	MOVLW       ?lstr4_Temporizador
0x0588	0x6E55      	MOVWF       FARG_Lcd_Out_text 
0x058A	0x0E00      	MOVLW       hi_addr(?lstr4_Temporizador)
0x058C	0x6E56      	MOVWF       FARG_Lcd_Out_text+1 
0x058E	0xDE56      	RCALL       _Lcd_Out
;Temporizador.c,85 :: 		}
L_main19:
;Temporizador.c,86 :: 		}
0x0590	0xD7BC      	BRA         L_main16
L_main17:
;Temporizador.c,87 :: 		while (portb.b2 == 0){  //WHILE utilizado para somar as horas
L_main20:
0x0592	0xB481      	BTFSC       PORTB, 2 
0x0594	0xD042      	BRA         L_main21
;Temporizador.c,88 :: 		h++;
0x0596	0x4A50      	INFSNZ      _h, 1 
0x0598	0x2A51      	INCF        _h+1, 1 
;Temporizador.c,89 :: 		delay_ms(500);
0x059A	0x0E06      	MOVLW       6
0x059C	0x6E0B      	MOVWF       R11, 0
0x059E	0x0E13      	MOVLW       19
0x05A0	0x6E0C      	MOVWF       R12, 0
0x05A2	0x0EAD      	MOVLW       173
0x05A4	0x6E0D      	MOVWF       R13, 0
L_main22:
0x05A6	0x2E0D      	DECFSZ      R13, 1, 0
0x05A8	0xD7FE      	BRA         L_main22
0x05AA	0x2E0C      	DECFSZ      R12, 1, 0
0x05AC	0xD7FC      	BRA         L_main22
0x05AE	0x2E0B      	DECFSZ      R11, 1, 0
0x05B0	0xD7FA      	BRA         L_main22
0x05B2	0x0000      	NOP
0x05B4	0x0000      	NOP
;Temporizador.c,90 :: 		inttostr(h,txtH);
0x05B6	0xF053C050  	MOVFF       _h, FARG_IntToStr_input
0x05BA	0xF054C051  	MOVFF       _h+1, FARG_IntToStr_input+1
0x05BE	0x0E49      	MOVLW       _txtH
0x05C0	0x6E55      	MOVWF       FARG_IntToStr_output 
0x05C2	0x0E00      	MOVLW       hi_addr(_txtH)
0x05C4	0x6E56      	MOVWF       FARG_IntToStr_output+1 
0x05C6	0xDE9D      	RCALL       _IntToStr
;Temporizador.c,91 :: 		TrimLeft(txtH);
0x05C8	0x0E49      	MOVLW       _txtH
0x05CA	0x6E53      	MOVWF       FARG_TrimLeft_str 
0x05CC	0x0E00      	MOVLW       hi_addr(_txtH)
0x05CE	0x6E54      	MOVWF       FARG_TrimLeft_str+1 
0x05D0	0xDE72      	RCALL       _TrimLeft
;Temporizador.c,92 :: 		Lcd_Out(1,1,txtH);
0x05D2	0x0E01      	MOVLW       1
0x05D4	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x05D6	0x0E01      	MOVLW       1
0x05D8	0x6E54      	MOVWF       FARG_Lcd_Out_column 
0x05DA	0x0E49      	MOVLW       _txtH
0x05DC	0x6E55      	MOVWF       FARG_Lcd_Out_text 
0x05DE	0x0E00      	MOVLW       hi_addr(_txtH)
0x05E0	0x6E56      	MOVWF       FARG_Lcd_Out_text+1 
0x05E2	0xDE2C      	RCALL       _Lcd_Out
;Temporizador.c,95 :: 		if (h==99){
0x05E4	0x0E00      	MOVLW       0
0x05E6	0x1851      	XORWF       _h+1, 0 
0x05E8	0xE102      	BNZ         L__main53
0x05EA	0x0E63      	MOVLW       99
0x05EC	0x1850      	XORWF       _h, 0 
L__main53:
0x05EE	0xE114      	BNZ         L_main23
;Temporizador.c,96 :: 		h = 0;
0x05F0	0x6A50      	CLRF        _h 
0x05F2	0x6A51      	CLRF        _h+1 
;Temporizador.c,97 :: 		Lcd_Out(1,1,"  ");
0x05F4	0x0E01      	MOVLW       1
0x05F6	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x05F8	0x0E01      	MOVLW       1
0x05FA	0x6E54      	MOVWF       FARG_Lcd_Out_column 
0x05FC	0x0E1E      	MOVLW       ?lstr5_Temporizador
0x05FE	0x6E55      	MOVWF       FARG_Lcd_Out_text 
0x0600	0x0E00      	MOVLW       hi_addr(?lstr5_Temporizador)
0x0602	0x6E56      	MOVWF       FARG_Lcd_Out_text+1 
0x0604	0xDE1B      	RCALL       _Lcd_Out
;Temporizador.c,98 :: 		Lcd_Out(1,1,"0");
0x0606	0x0E01      	MOVLW       1
0x0608	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x060A	0x0E01      	MOVLW       1
0x060C	0x6E54      	MOVWF       FARG_Lcd_Out_column 
0x060E	0x0E2D      	MOVLW       ?lstr6_Temporizador
0x0610	0x6E55      	MOVWF       FARG_Lcd_Out_text 
0x0612	0x0E00      	MOVLW       hi_addr(?lstr6_Temporizador)
0x0614	0x6E56      	MOVWF       FARG_Lcd_Out_text+1 
0x0616	0xDE12      	RCALL       _Lcd_Out
;Temporizador.c,99 :: 		}
L_main23:
;Temporizador.c,100 :: 		}
0x0618	0xD7BC      	BRA         L_main20
L_main21:
;Temporizador.c,101 :: 		if (portb.b3 == 0){  // IF para acionar o flag que indica que o temporizador esta setado
0x061A	0xB681      	BTFSC       PORTB, 3 
0x061C	0xD005      	BRA         L_main24
;Temporizador.c,102 :: 		flag1 = 1;
0x061E	0x0E01      	MOVLW       1
0x0620	0x6E47      	MOVWF       _flag1 
0x0622	0x0E00      	MOVLW       0
0x0624	0x6E48      	MOVWF       _flag1+1 
;Temporizador.c,103 :: 		break;  // quebra o WHILE Rb0==1(botao Rb0 nao esta acionado)
0x0626	0xD001      	BRA         L_main15
;Temporizador.c,104 :: 		}
L_main24:
;Temporizador.c,105 :: 		}
0x0628	0xD76E      	BRA         L_main14
L_main15:
;Temporizador.c,106 :: 		delay_ms(500);
0x062A	0x0E06      	MOVLW       6
0x062C	0x6E0B      	MOVWF       R11, 0
0x062E	0x0E13      	MOVLW       19
0x0630	0x6E0C      	MOVWF       R12, 0
0x0632	0x0EAD      	MOVLW       173
0x0634	0x6E0D      	MOVWF       R13, 0
L_main25:
0x0636	0x2E0D      	DECFSZ      R13, 1, 0
0x0638	0xD7FE      	BRA         L_main25
0x063A	0x2E0C      	DECFSZ      R12, 1, 0
0x063C	0xD7FC      	BRA         L_main25
0x063E	0x2E0B      	DECFSZ      R11, 1, 0
0x0640	0xD7FA      	BRA         L_main25
0x0642	0x0000      	NOP
0x0644	0x0000      	NOP
;Temporizador.c,107 :: 		if (flag1!=-1)  // quebra o FOR dos segundos
0x0646	0x0EFF      	MOVLW       255
0x0648	0x1848      	XORWF       _flag1+1, 0 
0x064A	0xE102      	BNZ         L__main54
0x064C	0x0EFF      	MOVLW       255
0x064E	0x1847      	XORWF       _flag1, 0 
L__main54:
0x0650	0xE001      	BZ          L_main26
;Temporizador.c,108 :: 		break;
0x0652	0xD003      	BRA         L_main12
L_main26:
;Temporizador.c,66 :: 		for(seg=0;seg<60;seg++){   //For loop para contar os segundos
0x0654	0x4A35      	INFSNZ      _seg, 1 
0x0656	0x2A36      	INCF        _seg+1, 1 
;Temporizador.c,109 :: 		}
0x0658	0xD735      	BRA         L_main11
L_main12:
;Temporizador.c,110 :: 		Lcd_Out(1,8," "); // limpa o campo dos segundos quando o loop dos segundos estoura
0x065A	0x0E01      	MOVLW       1
0x065C	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x065E	0x0E08      	MOVLW       8
0x0660	0x6E54      	MOVWF       FARG_Lcd_Out_column 
0x0662	0x0E2B      	MOVLW       ?lstr7_Temporizador
0x0664	0x6E55      	MOVWF       FARG_Lcd_Out_text 
0x0666	0x0E00      	MOVLW       hi_addr(?lstr7_Temporizador)
0x0668	0x6E56      	MOVWF       FARG_Lcd_Out_text+1 
0x066A	0xDDE8      	RCALL       _Lcd_Out
;Temporizador.c,111 :: 		if (flag1!=-1)  // quebra o FOR dos minutos
0x066C	0x0EFF      	MOVLW       255
0x066E	0x1848      	XORWF       _flag1+1, 0 
0x0670	0xE102      	BNZ         L__main55
0x0672	0x0EFF      	MOVLW       255
0x0674	0x1847      	XORWF       _flag1, 0 
L__main55:
0x0676	0xE001      	BZ          L_main27
;Temporizador.c,112 :: 		break;
0x0678	0xD003      	BRA         L_main9
L_main27:
;Temporizador.c,62 :: 		for(m=0;m<60;m++){   // For loop para contar os minutos
0x067A	0x4A45      	INFSNZ      _m, 1 
0x067C	0x2A46      	INCF        _m+1, 1 
;Temporizador.c,113 :: 		}
0x067E	0xD6FF      	BRA         L_main8
L_main9:
;Temporizador.c,114 :: 		Lcd_Out(1,5," "); // limpa o campo dos minutos quando o loop dos minutos estoura
0x0680	0x0E01      	MOVLW       1
0x0682	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x0684	0x0E05      	MOVLW       5
0x0686	0x6E54      	MOVWF       FARG_Lcd_Out_column 
0x0688	0x0E2F      	MOVLW       ?lstr8_Temporizador
0x068A	0x6E55      	MOVWF       FARG_Lcd_Out_text 
0x068C	0x0E00      	MOVLW       hi_addr(?lstr8_Temporizador)
0x068E	0x6E56      	MOVWF       FARG_Lcd_Out_text+1 
0x0690	0xDDD5      	RCALL       _Lcd_Out
;Temporizador.c,115 :: 		if (flag1!=-1) // quebra o FOR das horas
0x0692	0x0EFF      	MOVLW       255
0x0694	0x1848      	XORWF       _flag1+1, 0 
0x0696	0xE102      	BNZ         L__main56
0x0698	0x0EFF      	MOVLW       255
0x069A	0x1847      	XORWF       _flag1, 0 
L__main56:
0x069C	0xE001      	BZ          L_main28
;Temporizador.c,116 :: 		break;
0x069E	0xD003      	BRA         L_main6
L_main28:
;Temporizador.c,58 :: 		for(h=0;h<24;h++){    // For loop para contar as horas
0x06A0	0x4A50      	INFSNZ      _h, 1 
0x06A2	0x2A51      	INCF        _h+1, 1 
;Temporizador.c,117 :: 		}
0x06A4	0xD6C9      	BRA         L_main5
L_main6:
;Temporizador.c,118 :: 		Lcd_Out(1,2," "); // limpa o campo das horas quando o loop das horas estoura
0x06A6	0x0E01      	MOVLW       1
0x06A8	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x06AA	0x0E02      	MOVLW       2
0x06AC	0x6E54      	MOVWF       FARG_Lcd_Out_column 
0x06AE	0x0E33      	MOVLW       ?lstr9_Temporizador
0x06B0	0x6E55      	MOVWF       FARG_Lcd_Out_text 
0x06B2	0x0E00      	MOVLW       hi_addr(?lstr9_Temporizador)
0x06B4	0x6E56      	MOVWF       FARG_Lcd_Out_text+1 
0x06B6	0xDDC2      	RCALL       _Lcd_Out
;Temporizador.c,119 :: 		}
0x06B8	0xD6B6      	BRA         L_main3
L_main4:
;Temporizador.c,122 :: 		for(;h>=0;h--){    // For loop para contar as horas
L_main29:
0x06BA	0x0E80      	MOVLW       128
0x06BC	0x1851      	XORWF       _h+1, 0 
0x06BE	0x6E00      	MOVWF       R0 
0x06C0	0x0E80      	MOVLW       128
0x06C2	0x5C00      	SUBWF       R0, 0 
0x06C4	0xE102      	BNZ         L__main57
0x06C6	0x0E00      	MOVLW       0
0x06C8	0x5C50      	SUBWF       _h, 0 
L__main57:
0x06CA	0xA0D8      	BTFSS       STATUS, 0 
0x06CC	0xD0D5      	BRA         L_main30
;Temporizador.c,123 :: 		inttostr(h,txtH);     // Converte o inteiro hora para string e salva no char relativo a hora
0x06CE	0xF053C050  	MOVFF       _h, FARG_IntToStr_input
0x06D2	0xF054C051  	MOVFF       _h+1, FARG_IntToStr_input+1
0x06D6	0x0E49      	MOVLW       _txtH
0x06D8	0x6E55      	MOVWF       FARG_IntToStr_output 
0x06DA	0x0E00      	MOVLW       hi_addr(_txtH)
0x06DC	0x6E56      	MOVWF       FARG_IntToStr_output+1 
0x06DE	0xDE11      	RCALL       _IntToStr
;Temporizador.c,124 :: 		TrimLeft(txtH);       // Uso da funcao TrimLeft
0x06E0	0x0E49      	MOVLW       _txtH
0x06E2	0x6E53      	MOVWF       FARG_TrimLeft_str 
0x06E4	0x0E00      	MOVLW       hi_addr(_txtH)
0x06E6	0x6E54      	MOVWF       FARG_TrimLeft_str+1 
0x06E8	0xDDE6      	RCALL       _TrimLeft
;Temporizador.c,125 :: 		Lcd_Out(1,1,txtH);    // Escreve as horas no LCD
0x06EA	0x0E01      	MOVLW       1
0x06EC	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x06EE	0x0E01      	MOVLW       1
0x06F0	0x6E54      	MOVWF       FARG_Lcd_Out_column 
0x06F2	0x0E49      	MOVLW       _txtH
0x06F4	0x6E55      	MOVWF       FARG_Lcd_Out_text 
0x06F6	0x0E00      	MOVLW       hi_addr(_txtH)
0x06F8	0x6E56      	MOVWF       FARG_Lcd_Out_text+1 
0x06FA	0xDDA0      	RCALL       _Lcd_Out
;Temporizador.c,126 :: 		for(;m>=0;m--){   // For loop para contar os minutos
L_main32:
0x06FC	0x0E80      	MOVLW       128
0x06FE	0x1846      	XORWF       _m+1, 0 
0x0700	0x6E00      	MOVWF       R0 
0x0702	0x0E80      	MOVLW       128
0x0704	0x5C00      	SUBWF       R0, 0 
0x0706	0xE102      	BNZ         L__main58
0x0708	0x0E00      	MOVLW       0
0x070A	0x5C45      	SUBWF       _m, 0 
L__main58:
0x070C	0xA0D8      	BTFSS       STATUS, 0 
0x070E	0xD090      	BRA         L_main33
;Temporizador.c,127 :: 		inttostr(m,txtM);    // Converte o inteiro minuto para string e salva no char relativo ao minuto
0x0710	0xF053C045  	MOVFF       _m, FARG_IntToStr_input
0x0714	0xF054C046  	MOVFF       _m+1, FARG_IntToStr_input+1
0x0718	0x0E37      	MOVLW       _txtM
0x071A	0x6E55      	MOVWF       FARG_IntToStr_output 
0x071C	0x0E00      	MOVLW       hi_addr(_txtM)
0x071E	0x6E56      	MOVWF       FARG_IntToStr_output+1 
0x0720	0xDDF0      	RCALL       _IntToStr
;Temporizador.c,128 :: 		TrimLeft(txtM);      // Uso da funcao TrimLeft
0x0722	0x0E37      	MOVLW       _txtM
0x0724	0x6E53      	MOVWF       FARG_TrimLeft_str 
0x0726	0x0E00      	MOVLW       hi_addr(_txtM)
0x0728	0x6E54      	MOVWF       FARG_TrimLeft_str+1 
0x072A	0xDDC5      	RCALL       _TrimLeft
;Temporizador.c,129 :: 		Lcd_Out(1,4,txtM);   // Escreve os minutos no LCD
0x072C	0x0E01      	MOVLW       1
0x072E	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x0730	0x0E04      	MOVLW       4
0x0732	0x6E54      	MOVWF       FARG_Lcd_Out_column 
0x0734	0x0E37      	MOVLW       _txtM
0x0736	0x6E55      	MOVWF       FARG_Lcd_Out_text 
0x0738	0x0E00      	MOVLW       hi_addr(_txtM)
0x073A	0x6E56      	MOVWF       FARG_Lcd_Out_text+1 
0x073C	0xDD7F      	RCALL       _Lcd_Out
;Temporizador.c,130 :: 		for(;seg>=0;seg--){   //For loop para contar os segundos
L_main35:
0x073E	0x0E80      	MOVLW       128
0x0740	0x1836      	XORWF       _seg+1, 0 
0x0742	0x6E00      	MOVWF       R0 
0x0744	0x0E80      	MOVLW       128
0x0746	0x5C00      	SUBWF       R0, 0 
0x0748	0xE102      	BNZ         L__main59
0x074A	0x0E00      	MOVLW       0
0x074C	0x5C35      	SUBWF       _seg, 0 
L__main59:
0x074E	0xE34C      	BNC         L_main36
;Temporizador.c,131 :: 		inttostr(seg,txtS);        // Converte o inteiro segundo para string e salva no char relativo ao segundo
0x0750	0xF053C035  	MOVFF       _seg, FARG_IntToStr_input
0x0754	0xF054C036  	MOVFF       _seg+1, FARG_IntToStr_input+1
0x0758	0x0E3E      	MOVLW       _txtS
0x075A	0x6E55      	MOVWF       FARG_IntToStr_output 
0x075C	0x0E00      	MOVLW       hi_addr(_txtS)
0x075E	0x6E56      	MOVWF       FARG_IntToStr_output+1 
0x0760	0xDDD0      	RCALL       _IntToStr
;Temporizador.c,132 :: 		TrimLeft(txtS);            // Uso da funcao TrimLeft
0x0762	0x0E3E      	MOVLW       _txtS
0x0764	0x6E53      	MOVWF       FARG_TrimLeft_str 
0x0766	0x0E00      	MOVLW       hi_addr(_txtS)
0x0768	0x6E54      	MOVWF       FARG_TrimLeft_str+1 
0x076A	0xDDA5      	RCALL       _TrimLeft
;Temporizador.c,133 :: 		Lcd_Out(1,7,txtS);         // Escreve os segundos no LCD
0x076C	0x0E01      	MOVLW       1
0x076E	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x0770	0x0E07      	MOVLW       7
0x0772	0x6E54      	MOVWF       FARG_Lcd_Out_column 
0x0774	0x0E3E      	MOVLW       _txtS
0x0776	0x6E55      	MOVWF       FARG_Lcd_Out_text 
0x0778	0x0E00      	MOVLW       hi_addr(_txtS)
0x077A	0x6E56      	MOVWF       FARG_Lcd_Out_text+1 
0x077C	0xDD5F      	RCALL       _Lcd_Out
;Temporizador.c,137 :: 		if (portb.b0 == 1)
0x077E	0xA081      	BTFSS       PORTB, 0 
0x0780	0xD00F      	BRA         L_main38
;Temporizador.c,138 :: 		delay_ms(1000);
0x0782	0x0E0B      	MOVLW       11
0x0784	0x6E0B      	MOVWF       R11, 0
0x0786	0x0E26      	MOVLW       38
0x0788	0x6E0C      	MOVWF       R12, 0
0x078A	0x0E5D      	MOVLW       93
0x078C	0x6E0D      	MOVWF       R13, 0
L_main39:
0x078E	0x2E0D      	DECFSZ      R13, 1, 0
0x0790	0xD7FE      	BRA         L_main39
0x0792	0x2E0C      	DECFSZ      R12, 1, 0
0x0794	0xD7FC      	BRA         L_main39
0x0796	0x2E0B      	DECFSZ      R11, 1, 0
0x0798	0xD7FA      	BRA         L_main39
0x079A	0x0000      	NOP
0x079C	0x0000      	NOP
0x079E	0xD00D      	BRA         L_main40
L_main38:
;Temporizador.c,140 :: 		delay_ms(100);
0x07A0	0x0E02      	MOVLW       2
0x07A2	0x6E0B      	MOVWF       R11, 0
0x07A4	0x0E04      	MOVLW       4
0x07A6	0x6E0C      	MOVWF       R12, 0
0x07A8	0x0EBA      	MOVLW       186
0x07AA	0x6E0D      	MOVWF       R13, 0
L_main41:
0x07AC	0x2E0D      	DECFSZ      R13, 1, 0
0x07AE	0xD7FE      	BRA         L_main41
0x07B0	0x2E0C      	DECFSZ      R12, 1, 0
0x07B2	0xD7FC      	BRA         L_main41
0x07B4	0x2E0B      	DECFSZ      R11, 1, 0
0x07B6	0xD7FA      	BRA         L_main41
0x07B8	0x0000      	NOP
L_main40:
;Temporizador.c,141 :: 		if (seg<11){  // IF utilizado para limpar a segundo digitos dos segundos
0x07BA	0x0E80      	MOVLW       128
0x07BC	0x1836      	XORWF       _seg+1, 0 
0x07BE	0x6E00      	MOVWF       R0 
0x07C0	0x0E80      	MOVLW       128
0x07C2	0x5C00      	SUBWF       R0, 0 
0x07C4	0xE102      	BNZ         L__main60
0x07C6	0x0E0B      	MOVLW       11
0x07C8	0x5C35      	SUBWF       _seg, 0 
L__main60:
0x07CA	0xE209      	BC          L_main42
;Temporizador.c,142 :: 		Lcd_Out(1,8," ");
0x07CC	0x0E01      	MOVLW       1
0x07CE	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x07D0	0x0E08      	MOVLW       8
0x07D2	0x6E54      	MOVWF       FARG_Lcd_Out_column 
0x07D4	0x0E31      	MOVLW       ?lstr10_Temporizador
0x07D6	0x6E55      	MOVWF       FARG_Lcd_Out_text 
0x07D8	0x0E00      	MOVLW       hi_addr(?lstr10_Temporizador)
0x07DA	0x6E56      	MOVWF       FARG_Lcd_Out_text+1 
0x07DC	0xDD2F      	RCALL       _Lcd_Out
;Temporizador.c,143 :: 		}
L_main42:
;Temporizador.c,130 :: 		for(;seg>=0;seg--){   //For loop para contar os segundos
0x07DE	0x0E01      	MOVLW       1
0x07E0	0x5E35      	SUBWF       _seg, 1 
0x07E2	0x0E00      	MOVLW       0
0x07E4	0x5A36      	SUBWFB      _seg+1, 1 
;Temporizador.c,144 :: 		}
0x07E6	0xD7AB      	BRA         L_main35
L_main36:
;Temporizador.c,145 :: 		Lcd_Out(1,8," "); // limpa o campo dos segundos quando o loop dos segundos estoura
0x07E8	0x0E01      	MOVLW       1
0x07EA	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x07EC	0x0E08      	MOVLW       8
0x07EE	0x6E54      	MOVWF       FARG_Lcd_Out_column 
0x07F0	0x0E29      	MOVLW       ?lstr11_Temporizador
0x07F2	0x6E55      	MOVWF       FARG_Lcd_Out_text 
0x07F4	0x0E00      	MOVLW       hi_addr(?lstr11_Temporizador)
0x07F6	0x6E56      	MOVWF       FARG_Lcd_Out_text+1 
0x07F8	0xDD21      	RCALL       _Lcd_Out
;Temporizador.c,146 :: 		seg = 59;
0x07FA	0x0E3B      	MOVLW       59
0x07FC	0x6E35      	MOVWF       _seg 
0x07FE	0x0E00      	MOVLW       0
0x0800	0x6E36      	MOVWF       _seg+1 
;Temporizador.c,147 :: 		if (m<11){  // IF utilizado para limpar a segundo digitos dos minutos
0x0802	0x0E80      	MOVLW       128
0x0804	0x1846      	XORWF       _m+1, 0 
0x0806	0x6E00      	MOVWF       R0 
0x0808	0x0E80      	MOVLW       128
0x080A	0x5C00      	SUBWF       R0, 0 
0x080C	0xE102      	BNZ         L__main61
0x080E	0x0E0B      	MOVLW       11
0x0810	0x5C45      	SUBWF       _m, 0 
L__main61:
0x0812	0xE209      	BC          L_main43
;Temporizador.c,148 :: 		Lcd_Out(1,5," ");
0x0814	0x0E01      	MOVLW       1
0x0816	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x0818	0x0E05      	MOVLW       5
0x081A	0x6E54      	MOVWF       FARG_Lcd_Out_column 
0x081C	0x0E23      	MOVLW       ?lstr12_Temporizador
0x081E	0x6E55      	MOVWF       FARG_Lcd_Out_text 
0x0820	0x0E00      	MOVLW       hi_addr(?lstr12_Temporizador)
0x0822	0x6E56      	MOVWF       FARG_Lcd_Out_text+1 
0x0824	0xDD0B      	RCALL       _Lcd_Out
;Temporizador.c,149 :: 		}
L_main43:
;Temporizador.c,126 :: 		for(;m>=0;m--){   // For loop para contar os minutos
0x0826	0x0E01      	MOVLW       1
0x0828	0x5E45      	SUBWF       _m, 1 
0x082A	0x0E00      	MOVLW       0
0x082C	0x5A46      	SUBWFB      _m+1, 1 
;Temporizador.c,150 :: 		}
0x082E	0xD766      	BRA         L_main32
L_main33:
;Temporizador.c,151 :: 		Lcd_Out(1,5," "); // limpa o campo dos minutos quando o loop dos minutos estoura
0x0830	0x0E01      	MOVLW       1
0x0832	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x0834	0x0E05      	MOVLW       5
0x0836	0x6E54      	MOVWF       FARG_Lcd_Out_column 
0x0838	0x0E21      	MOVLW       ?lstr13_Temporizador
0x083A	0x6E55      	MOVWF       FARG_Lcd_Out_text 
0x083C	0x0E00      	MOVLW       hi_addr(?lstr13_Temporizador)
0x083E	0x6E56      	MOVWF       FARG_Lcd_Out_text+1 
0x0840	0xDCFD      	RCALL       _Lcd_Out
;Temporizador.c,152 :: 		m = 59;
0x0842	0x0E3B      	MOVLW       59
0x0844	0x6E45      	MOVWF       _m 
0x0846	0x0E00      	MOVLW       0
0x0848	0x6E46      	MOVWF       _m+1 
;Temporizador.c,153 :: 		if (h<11){  // IF utilizado para limpar a segundo digitos das horas
0x084A	0x0E80      	MOVLW       128
0x084C	0x1851      	XORWF       _h+1, 0 
0x084E	0x6E00      	MOVWF       R0 
0x0850	0x0E80      	MOVLW       128
0x0852	0x5C00      	SUBWF       R0, 0 
0x0854	0xE102      	BNZ         L__main62
0x0856	0x0E0B      	MOVLW       11
0x0858	0x5C50      	SUBWF       _h, 0 
L__main62:
0x085A	0xE209      	BC          L_main44
;Temporizador.c,154 :: 		Lcd_Out(1,2," ");
0x085C	0x0E01      	MOVLW       1
0x085E	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x0860	0x0E02      	MOVLW       2
0x0862	0x6E54      	MOVWF       FARG_Lcd_Out_column 
0x0864	0x0E25      	MOVLW       ?lstr14_Temporizador
0x0866	0x6E55      	MOVWF       FARG_Lcd_Out_text 
0x0868	0x0E00      	MOVLW       hi_addr(?lstr14_Temporizador)
0x086A	0x6E56      	MOVWF       FARG_Lcd_Out_text+1 
0x086C	0xDCE7      	RCALL       _Lcd_Out
;Temporizador.c,155 :: 		}
L_main44:
;Temporizador.c,122 :: 		for(;h>=0;h--){    // For loop para contar as horas
0x086E	0x0E01      	MOVLW       1
0x0870	0x5E50      	SUBWF       _h, 1 
0x0872	0x0E00      	MOVLW       0
0x0874	0x5A51      	SUBWFB      _h+1, 1 
;Temporizador.c,156 :: 		}
0x0876	0xD721      	BRA         L_main29
L_main30:
;Temporizador.c,157 :: 		Lcd_Out(1,2," "); // limpa o campo das horas quando o loop das horas estoura
0x0878	0x0E01      	MOVLW       1
0x087A	0x6E53      	MOVWF       FARG_Lcd_Out_row 
0x087C	0x0E02      	MOVLW       2
0x087E	0x6E54      	MOVWF       FARG_Lcd_Out_column 
0x0880	0x0E27      	MOVLW       ?lstr15_Temporizador
0x0882	0x6E55      	MOVWF       FARG_Lcd_Out_text 
0x0884	0x0E00      	MOVLW       hi_addr(?lstr15_Temporizador)
0x0886	0x6E56      	MOVWF       FARG_Lcd_Out_text+1 
0x0888	0xDCD9      	RCALL       _Lcd_Out
;Temporizador.c,159 :: 		portc.rc0 = 1; // ativacao do rele
0x088A	0x8082      	BSF         PORTC, 0 
;Temporizador.c,160 :: 		delay_ms(5000);
0x088C	0x0E33      	MOVLW       51
0x088E	0x6E0B      	MOVWF       R11, 0
0x0890	0x0EBB      	MOVLW       187
0x0892	0x6E0C      	MOVWF       R12, 0
0x0894	0x0EDF      	MOVLW       223
0x0896	0x6E0D      	MOVWF       R13, 0
L_main45:
0x0898	0x2E0D      	DECFSZ      R13, 1, 0
0x089A	0xD7FE      	BRA         L_main45
0x089C	0x2E0C      	DECFSZ      R12, 1, 0
0x089E	0xD7FC      	BRA         L_main45
0x08A0	0x2E0B      	DECFSZ      R11, 1, 0
0x08A2	0xD7FA      	BRA         L_main45
0x08A4	0x0000      	NOP
0x08A6	0x0000      	NOP
;Temporizador.c,161 :: 		portc.rc0 = 0; //desativacao do rele
0x08A8	0x9082      	BCF         PORTC, 0 
;Temporizador.c,162 :: 		} /// fim do programa
L_end_main:
0x08AA	0xD7FF      	BRA         $+0
; end of _main
0x08CC	0xF015EE10  	LFSR        1, 21
0x08D0	0x0E20      	MOVLW       32
0x08D2	0x6E00      	MOVWF       R0 
0x08D4	0x0E01      	MOVLW       1
0x08D6	0x6E01      	MOVWF       R1 
0x08D8	0x0EAC      	MOVLW       172
0x08DA	0x6EF6      	MOVWF       4086 
0x08DC	0x0E08      	MOVLW       8
0x08DE	0x6EF7      	MOVWF       TBLPTRH 
0x08E0	0x0E00      	MOVLW       0
0x08E2	0x6EF8      	MOVWF       TBLPTRU 
0x08E4	0xF001EC16  	CALL        556, 0
0x08E8	0x0012      	RETURN      0
;Temporizador.c,0 :: ?ICS?lstr4_Temporizador
0x08AC	0x0030 ;?ICS?lstr4_Temporizador+0
; end of ?ICS?lstr4_Temporizador
;Temporizador.c,0 :: ?ICS?lstr3_Temporizador
0x08AE	0x2020 ;?ICS?lstr3_Temporizador+0
0x08B0	0x00 ;?ICS?lstr3_Temporizador+2
; end of ?ICS?lstr3_Temporizador
;Temporizador.c,0 :: ?ICS?lstr1_Temporizador
0x08B1	0x003A ;?ICS?lstr1_Temporizador+0
; end of ?ICS?lstr1_Temporizador
;Temporizador.c,0 :: ?ICS?lstr2_Temporizador
0x08B3	0x003A ;?ICS?lstr2_Temporizador+0
; end of ?ICS?lstr2_Temporizador
;Temporizador.c,0 :: ?ICS?lstr5_Temporizador
0x08B5	0x2020 ;?ICS?lstr5_Temporizador+0
0x08B7	0x00 ;?ICS?lstr5_Temporizador+2
; end of ?ICS?lstr5_Temporizador
;Temporizador.c,0 :: ?ICS?lstr13_Temporizador
0x08B8	0x0020 ;?ICS?lstr13_Temporizador+0
; end of ?ICS?lstr13_Temporizador
;Temporizador.c,0 :: ?ICS?lstr12_Temporizador
0x08BA	0x0020 ;?ICS?lstr12_Temporizador+0
; end of ?ICS?lstr12_Temporizador
;Temporizador.c,0 :: ?ICS?lstr14_Temporizador
0x08BC	0x0020 ;?ICS?lstr14_Temporizador+0
; end of ?ICS?lstr14_Temporizador
;Temporizador.c,0 :: ?ICS?lstr15_Temporizador
0x08BE	0x0020 ;?ICS?lstr15_Temporizador+0
; end of ?ICS?lstr15_Temporizador
;Temporizador.c,0 :: ?ICS?lstr11_Temporizador
0x08C0	0x0020 ;?ICS?lstr11_Temporizador+0
; end of ?ICS?lstr11_Temporizador
;Temporizador.c,0 :: ?ICS?lstr7_Temporizador
0x08C2	0x0020 ;?ICS?lstr7_Temporizador+0
; end of ?ICS?lstr7_Temporizador
;Temporizador.c,0 :: ?ICS?lstr6_Temporizador
0x08C4	0x0030 ;?ICS?lstr6_Temporizador+0
; end of ?ICS?lstr6_Temporizador
;Temporizador.c,0 :: ?ICS?lstr8_Temporizador
0x08C6	0x0020 ;?ICS?lstr8_Temporizador+0
; end of ?ICS?lstr8_Temporizador
;Temporizador.c,0 :: ?ICS?lstr10_Temporizador
0x08C8	0x0020 ;?ICS?lstr10_Temporizador+0
; end of ?ICS?lstr10_Temporizador
;Temporizador.c,0 :: ?ICS?lstr9_Temporizador
0x08CA	0x0020 ;?ICS?lstr9_Temporizador+0
; end of ?ICS?lstr9_Temporizador
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [10]    _Delay_50us
0x0026      [22]    _Delay_5500us
0x003C       [6]    _Delay_1us
0x0042      [54]    _Div_16x16_U
0x0078     [126]    _Lcd_Cmd
0x00F6     [148]    _WordToStr
0x018A      [12]    _Lcd_Chr_CP
0x0196     [150]    _Lcd_Init
0x022C      [16]    ___CC2DW
0x023C     [122]    _Lcd_Out
0x02B6      [76]    _TrimLeft
0x0302     [216]    _IntToStr
0x03DA    [1234]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATSda_temp_sda_L0
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATScl_temp_scl_L0
0x0000       [1]    SPI1_Write_tmp_L0
0x0000       [1]    FLASH_Erase_64_SaveINTCON_L0
0x0000       [1]    R0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [1]    __Lib_TFT_16bit_JPEG_FileReadBytes_Result_L0
0x0001       [2]    FLASH_Read_N_Bytes_i_L0
0x0001       [1]    R1
0x0001       [1]    __Lib_TFT_16bit_JPEG_FileRead_i_L0
0x0001       [1]    FLASH_Erase_Write_64_i_L0
0x0001       [1]    __Lib_PS2_Wait_Falling_nsample_L0
0x0001       [1]    FLASH_Write_32_i_L0
0x0001       [1]    __Lib_TFT_JPEG_FileReadBytes_Result_L0
0x0001       [1]    __Lib_TFT_JPEG_FileRead_i_L0
0x0001       [1]    I2C1_Rd_tmp_L0
0x0001       [1]    ispunct_rslt_L0
0x0002       [2]    strlen_cp_L0
0x0002       [1]    FLASH_Write_32_SaveINTCON_L0
0x0002       [2]    memchr_s_L0
0x0002       [1]    FLASH_Erase_Write_64_j_L0
0x0002       [2]    memset_pp_L0
0x0002       [1]    __Lib_USB_genHID_USB_CtrlTrf_Rx_Service_byteToRead_L0
0x0002       [2]    __Lib_USB_genHID_memset_usb_pp_L0
0x0002       [2]    memcpy_dd_L0
0x0002       [1]    R2
0x0002       [2]    __Lib_USB_genHID_memset_usb_int_pp_L0
0x0003       [2]    __Lib_USB_genHID_USB_CtrlTrf_Tx_Service_byteToSend_L0
0x0003       [1]    MM_Init_i_L0
0x0003       [1]    __Lib_USB_genHID_USB_CtrlTrf_Rx_Service_i_L0
0x0003       [2]    Ltrim_original_L0
0x0003       [2]    memmove_tt_L0
0x0003       [1]    FLASH_Erase_Write_64_SaveINTCON_L0
0x0003       [1]    R3
0x0003       [2]    __Lib_MmcFat16_f16_toInt_l_L0
0x0003       [2]    MM_TotalFreeMemSize_Tot_L0
0x0004       [2]    __Lib_USB_genHID_USB_Get_Status_Handler_p_L2
0x0004       [2]    strncpy_cp_L0
0x0004       [2]    __Lib_MemManager_MM_GetMemAlign_P_L0
0x0004       [2]    frexp_pom_L0
0x0004       [2]    __Lib_USB_genHID_USB_Transfer_Packet_Int_handle_L0
0x0004       [2]    __Lib_USB_genHID_USB_Std_Feature_Req_Handler_p_L0
0x0004       [2]    strcpy_cp_L0
0x0004       [2]    memcpy_ss_L0
0x0004       [2]    strncat_cp_L0
0x0004       [2]    strcat_cp_L0
0x0004       [2]    __Lib_USB_genHID_USB_Transfer_Packet_handle_L0
0x0004       [1]    R4
0x0005       [2]    Ltrim_p_L0
0x0005       [1]    MM_TotalFreeMemSize_i_L0
0x0005       [2]    __Lib_USB_genHID_USB_Configure_Endpoint_handle_L0
0x0005       [1]    R5
0x0005       [2]    memmove_ff_L0
0x0005       [2]    LongIntToHex_input_half_L0
0x0005       [2]    LongWordToHex_input_half_L0
0x0006       [1]    __Lib_MemManager_MM_GetMemAlign_i_L0
0x0006       [1]    R6
0x0007       [1]    __Lib_TFT_JPEG_GenerateHuffmanTables_bLength_L0
0x0007       [1]    __Lib_TFT_16bit_JPEG_GenerateHuffmanTables_bLength_L0
0x0007       [1]    R7
0x0008       [1]    R8
0x0008       [1]    __Lib_TFT_16bit_JPEG_GenerateHuffmanTables_bTable_L0
0x0008       [1]    __Lib_TFT_JPEG_GenerateHuffmanTables_bTable_L0
0x0009       [4]    __Lib_MmcFat16_f16_toLong_l_L0
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [2]    ?lstr4_Temporizador
0x0017       [3]    ?lstr3_Temporizador
0x001A       [2]    ?lstr1_Temporizador
0x001C       [2]    ?lstr2_Temporizador
0x001E       [3]    ?lstr5_Temporizador
0x0021       [2]    ?lstr13_Temporizador
0x0023       [2]    ?lstr12_Temporizador
0x0025       [2]    ?lstr14_Temporizador
0x0027       [2]    ?lstr15_Temporizador
0x0029       [2]    ?lstr11_Temporizador
0x002B       [2]    ?lstr7_Temporizador
0x002D       [2]    ?lstr6_Temporizador
0x002F       [2]    ?lstr8_Temporizador
0x0031       [2]    ?lstr10_Temporizador
0x0033       [2]    ?lstr9_Temporizador
0x0035       [2]    _seg
0x0037       [7]    _txtM
0x003E       [7]    _txtS
0x0045       [2]    _m
0x0047       [2]    _flag1
0x0049       [7]    _txtH
0x0050       [2]    _h
0x0052       [0]    __Lib_Lcd_cmd_status
0x0053       [1]    FARG_Lcd_Out_row
0x0053       [2]    FARG_TrimLeft_str
0x0053       [2]    FARG_IntToStr_input
0x0054       [1]    FARG_Lcd_Out_column
0x0055       [1]    TrimLeft_count_L0
0x0055       [2]    FARG_Lcd_Out_text
0x0055       [2]    FARG_IntToStr_output
0x0057       [1]    Lcd_Out_i_L0
0x0057       [2]    IntToStr_i_L0
0x0059       [2]    IntToStr_negative_L0
0x005B       [2]    IntToStr_inword_L0
0x005D       [1]    FARG_Lcd_Chr_CP_out_char
0x005D       [1]    WordToStr_len_L0
0x005E       [2]    FLOC__WordToStr
0x0060       [1]    FARG_Lcd_Cmd_out_char
0x0061       [2]    FARG_WordToStr_input
0x0063       [2]    FARG_WordToStr_output
0x0F81       [1]    PORTB
0x0F82       [1]    PORTC
0x0F83       [0]    LCD_D5
0x0F83       [0]    LCD_D4
0x0F83       [0]    RD6_bit
0x0F83       [0]    LCD_D7
0x0F83       [0]    LCD_D6
0x0F83       [0]    RD4_bit
0x0F83       [0]    RD5_bit
0x0F83       [0]    RD7_bit
0x0F84       [0]    RE1_bit
0x0F84       [0]    LCD_RS
0x0F84       [0]    LCD_EN
0x0F84       [0]    RE2_bit
0x0F93       [1]    TRISB
0x0F94       [1]    TRISC
0x0F95       [0]    TRISD7_bit
0x0F95       [0]    LCD_D6_Direction
0x0F95       [0]    LCD_D4_Direction
0x0F95       [0]    LCD_D5_Direction
0x0F95       [0]    TRISD4_bit
0x0F95       [0]    LCD_D7_Direction
0x0F95       [0]    TRISD5_bit
0x0F95       [0]    TRISD6_bit
0x0F96       [0]    LCD_EN_Direction
0x0F96       [0]    LCD_RS_Direction
0x0F96       [0]    TRISE1_bit
0x0F96       [0]    TRISE2_bit
0x0FC1       [1]    ADCON1
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x08AC       [2]    ?ICS?lstr4_Temporizador
0x08AE       [3]    ?ICS?lstr3_Temporizador
0x08B1       [2]    ?ICS?lstr1_Temporizador
0x08B3       [2]    ?ICS?lstr2_Temporizador
0x08B5       [3]    ?ICS?lstr5_Temporizador
0x08B8       [2]    ?ICS?lstr13_Temporizador
0x08BA       [2]    ?ICS?lstr12_Temporizador
0x08BC       [2]    ?ICS?lstr14_Temporizador
0x08BE       [2]    ?ICS?lstr15_Temporizador
0x08C0       [2]    ?ICS?lstr11_Temporizador
0x08C2       [2]    ?ICS?lstr7_Temporizador
0x08C4       [2]    ?ICS?lstr6_Temporizador
0x08C6       [2]    ?ICS?lstr8_Temporizador
0x08C8       [2]    ?ICS?lstr10_Temporizador
0x08CA       [2]    ?ICS?lstr9_Temporizador
//** Label List: ** 
//----------------------------------------------
  L_TrimLeft0
  L_TrimLeft1
  L_TrimLeft2
  L_main3
  L_main4
  L_main5
  L_main6
  L_main7
  L_main8
  L_main9
  L_main10
  L_main11
  L_main12
  L_main13
  L_main14
  L_main15
  L_main16
  L_main17
  L_main18
  L_main19
  L_main20
  L_main21
  L_main22
  L_main23
  L_main24
  L_main25
  L_main26
  L_main27
  L_main28
  L_main29
  L_main30
  L_main31
  L_main32
  L_main33
  L_main34
  L_main35
  L_main36
  L_main37
  L_main38
  L_main39
  L_main40
  L_main41
  L_main42
  L_main43
  L_main44
  L_main45
  L_end_TrimLeft
  _TrimLeft
  L_end_main
  _main
  L__main48
  L__main49
  L__main50
  L__main51
  L__main52
  L__main53
  L__main54
  L__main55
  L__main56
  L__main57
  L__main58
  L__main59
  L__main60
  L__main61
  L__main62
  L_ByteToStr0
  L_ByteToStr1
  L_ByteToStr2
  L_ByteToStr3
  L_ByteToStr4
  L_ByteToStr5
  L_WordToStr6
  L_WordToStr7
  L_WordToStr8
  L_WordToStr9
  L_WordToStr10
  L_WordToStr11
  L_WordToStrWithZeros12
  L_WordToStrWithZeros13
  L_WordToStrWithZeros14
  L_WordToStrWithZeros15
  L_WordToStrWithZeros16
  L_ShortToStr17
  L_ShortToStr18
  L_ShortToStr19
  L_ShortToStr20
  L_ShortToStr21
  L_ShortToStr22
  L_IntToStr23
  L_IntToStr24
  L_IntToStr25
  L_IntToStr26
  L_IntToStr27
  L_IntToStr28
  L_IntToStrWithZeros29
  L_IntToStrWithZeros30
  L_IntToStrWithZeros31
  L_IntToStrWithZeros32
  L_IntToStrWithZeros33
  L_IntToStrWithZeros34
  L_IntToStrWithZeros35
  L_IntToStrWithZeros36
  L_IntToStrWithZeros37
  L_LongWordToStr38
  L_LongWordToStr39
  L_LongWordToStr40
  L_LongWordToStr41
  L_LongWordToStr42
  L_LongWordToStr43
  L_LongWordToStrWithZeros44
  L_LongWordToStrWithZeros45
  L_LongWordToStrWithZeros46
  L_LongWordToStrWithZeros47
  L_LongWordToStrWithZeros48
  L_LongToStr49
  L_LongToStr50
  L_LongToStr51
  L_LongToStr52
  L_LongToStr53
  L_LongToStr54
  L_LongIntToStrWithZeros55
  L_LongIntToStrWithZeros56
  L_LongIntToStrWithZeros57
  L_LongIntToStrWithZeros58
  L_LongIntToStrWithZeros59
  L_LongIntToStrWithZeros60
  L_LongIntToStrWithZeros61
  L_LongIntToStrWithZeros62
  L_LongIntToStrWithZeros63
  L_Dec2Bcd64
  L_Dec2Bcd65
  L_Rtrim66
  L_Rtrim67
  L_Rtrim68
  L_Rtrim69
  L_Ltrim70
  L_Ltrim71
  L_Ltrim72
  L_Ltrim73
  L_Ltrim74
  L_Ltrim75
  L_FloatToStr76
  L_FloatToStr77
  L_FloatToStr78
  L_FloatToStr79
  L_FloatToStr80
  L_FloatToStr81
  L_FloatToStr82
  L_FloatToStr83
  L_FloatToStr84
  L_FloatToStr85
  L_FloatToStr86
  L_FloatToStr87
  L_FloatToStr88
  L_FloatToStr89
  L_FloatToStr90
  L_FloatToStr91
  L_FloatToStr92
  L_FloatToStr93
  L_FloatToStr94
  L_FloatToStr95
  L_FloatToStr96
  L_FloatToStr97
  L__Rtrim98
  L__Ltrim99
  L__FloatToStr100
  L_end_ByteToHex
  _ByteToHex
  L_end_ShortToHex
  _ShortToHex
  L_end_WordToHex
  _WordToHex
  L_end_IntToHex
  _IntToHex
  L_end_LongWordToHex
  _LongWordToHex
  L_end_LongIntToHex
  _LongIntToHex
  L_end_ByteToStr
  _ByteToStr
  L_end_WordToStr
  _WordToStr
  L__WordToStr109
  L_end_WordToStrWithZeros
  _WordToStrWithZeros
  L__WordToStrWithZeros111
  L_end_ShortToStr
  _ShortToStr
  L__ShortToStr113
  L_end_IntToStr
  _IntToStr
  L__IntToStr115
  L__IntToStr116
  L_end_IntToStrWithZeros
  _IntToStrWithZeros
  L__IntToStrWithZeros118
  L__IntToStrWithZeros119
  L__IntToStrWithZeros120
  L_end_LongWordToStr
  _LongWordToStr
  L__LongWordToStr122
  L__LongWordToStr123
  L_end_LongWordToStrWithZeros
  _LongWordToStrWithZeros
  L__LongWordToStrWithZeros125
  L_end_LongToStr
  _LongToStr
  L__LongToStr127
  L__LongToStr128
  L_end_LongIntToStrWithZeros
  _LongIntToStrWithZeros
  L__LongIntToStrWithZeros130
  L__LongIntToStrWithZeros131
  L__LongIntToStrWithZeros132
  L_end_Dec2Bcd
  _Dec2Bcd
  L_end_Bcd2Dec
  _Bcd2Dec
  L_end_Bcd2Dec16
  _Bcd2Dec16
  L__Bcd2Dec16136
  L__Bcd2Dec16137
  L_end_Dec2Bcd16
  _Dec2Bcd16
  L__Dec2Bcd16139
  L__Dec2Bcd16140
  L_end_Rtrim
  _Rtrim
  L__Rtrim142
  L_end_Ltrim
  _Ltrim
  L_end_FloatToStr
  _FloatToStr
  L__FloatToStr145
  L__FloatToStr146
  L__FloatToStr147
  L__FloatToStr148
  L__FloatToStr149
  L_Delay_10us0
  L_Delay_22us1
  L_Delay_50us2
  L_Delay_80us3
  L_Delay_500us4
  L_Delay_5500us5
  L_Delay_1ms6
  L_Delay_5ms7
  L_Delay_8ms8
  L_Delay_100ms9
  L_Delay_10ms10
  L_Delay_1sec11
  L____Boot_Delay4k12
  L____Boot_Delay8k13
  L____Boot_Delay12k14
  L____Boot_Delay16k15
  L____Boot_Delay24k16
  L____Boot_Delay32k17
  L____Boot_Delay48k18
  L____Boot_Delay64k19
  L____Boot_Delay128k20
  L_Delay_Cyc21
  L_Delay_Cyc22
  L_VDelay_ms23
  L_VDelay_ms24
  L_VDelay_ms25
  L_VDelay_Advanced_ms26
  L_VDelay_Advanced_ms27
  L_VDelay_Advanced_ms28
  L_end_Get_Fosc_kHz
  _Get_Fosc_kHz
  L_end_Delay_1us
  _Delay_1us
  L_end_Delay_10us
  _Delay_10us
  L_end_Delay_22us
  _Delay_22us
  L_end_Delay_50us
  _Delay_50us
  L_end_Delay_80us
  _Delay_80us
  L_end_Delay_500us
  _Delay_500us
  L_end_Delay_5500us
  _Delay_5500us
  L_end_Delay_1ms
  _Delay_1ms
  L_end_Delay_5ms
  _Delay_5ms
  L_end_Delay_8ms
  _Delay_8ms
  L_end_Delay_100ms
  _Delay_100ms
  L_end_Delay_10ms
  _Delay_10ms
  L_end_Delay_1sec
  _Delay_1sec
  L_end____Boot_Delay4k
  ____Boot_Delay4k
  L_end____Boot_Delay8k
  ____Boot_Delay8k
  L_end____Boot_Delay12k
  ____Boot_Delay12k
  L_end____Boot_Delay16k
  ____Boot_Delay16k
  L_end____Boot_Delay24k
  ____Boot_Delay24k
  L_end____Boot_Delay32k
  ____Boot_Delay32k
  L_end____Boot_Delay48k
  ____Boot_Delay48k
  L_end____Boot_Delay64k
  ____Boot_Delay64k
  L_end____Boot_Delay128k
  ____Boot_Delay128k
  L_end_Delay_Cyc
  _Delay_Cyc
  L_end_VDelay_ms
  _VDelay_ms
  L__VDelay_ms54
  L__VDelay_ms55
  L__VDelay_ms56
  L_end_VDelay_Advanced_ms
  _VDelay_Advanced_ms
  L__VDelay_Advanced_ms58
  L__VDelay_Advanced_ms59
  L__VDelay_Advanced_ms60
  L_Lcd_Cmd0
  L_Lcd_Cmd1
  L_Lcd_Out_CP2
  L_Lcd_Out_CP3
  L_Lcd_Chr4
  L_Lcd_Chr5
  L_Lcd_Chr6
  L_Lcd_Chr7
  L_Lcd_Chr8
  L_Lcd_Chr9
  L_Lcd_Chr10
  L_Lcd_Out11
  L_Lcd_Out12
  L_Lcd_Out13
  L_Lcd_Out14
  L_Lcd_Out15
  L_Lcd_Out16
  L_Lcd_Out17
  L_Lcd_Out18
  L_Lcd_Out19
  L_end_Lcd_Cmd
  _Lcd_Cmd
  L__Lcd_Cmd21
  L__Lcd_Cmd22
  L__Lcd_Cmd23
  L__Lcd_Cmd24
  L__Lcd_Cmd25
  L__Lcd_Cmd26
  L__Lcd_Cmd27
  L__Lcd_Cmd28
  L__Lcd_Cmd29
  L__Lcd_Cmd30
  L__Lcd_Cmd31
  L__Lcd_Cmd32
  L__Lcd_Cmd33
  L__Lcd_Cmd34
  L__Lcd_Cmd35
  L__Lcd_Cmd36
  L__Lcd_Cmd37
  L__Lcd_Cmd38
  L__Lcd_Cmd39
  L__Lcd_Cmd40
  L_end_Lcd_Chr_CP
  _Lcd_Chr_CP
  L_end_Lcd_Out_CP
  _Lcd_Out_CP
  L_end_Lcd_Chr
  _Lcd_Chr
  L_end_Lcd_Init
  _Lcd_Init
  L_end_Lcd_Out
  _Lcd_Out
  L_Div_16x16_S0
  L_Div_16x16_S1
  LOOPS3232A
  SADD22LA
  SOK22LA
  SADD22L8
  SOK22L8
  LOOPS3232B
  SADD22LB
  SOK22LB
  SADD22L16
  SOK22L16
  LOOPS3232C
  SADD22LC
  SOK22LC
  SADD22L24
  SOK22L24
  LOOPS3232D
  SADD22LD
  SOK22LD
  SOK22L
  L_Div_32x32_S6
  L_Div_32x32_S7
  L_Div_32x32_S8
  L_Div_32x32_S9
  FXD3232S
  END_ALL
  CA3232S
  C3232SX
  C3232SX1
  C3232S
  C3232S2
  C3232SX4
  C3232SOK
  C3232SX3
  C3232SX2
  avoid_comfrem
  LOOPU3232A
  UADD22LA
  UOK22LA
  UADD22L8
  UOK22L8
  LOOPU3232B
  UADD22LB
  UOK22LB
  UADD22L16
  UOK22L16
  LOOPU3232C
  UADD22LC
  UOK22LC
  UADD22L24
  UOK22L24
  LOOPU3232D
  UADD22LD
  UOK22LD
  UOK22L
  _NEXT
  _EXIT2
  _LOOP
  _EXIT1
  _IF_FIRST
  _IF_SECOND
  _INVERCE_FIRST
  _MULT
  _INBERSE_SECOND
  _EXIT
  L_end_Div_8x8_U
  _Div_8x8_U
  L_end_Div_16x16_U
  _Div_16x16_U
  L_end_Div_16x16_S_L
  _Div_16x16_S_L
  L_end_Div_16x16_S
  _Div_16x16_S
  L_end_Div_8x8_S
  _Div_8x8_S
  L_end_Mul_8x8_S
  _Mul_8x8_S
  L_end_Mul_16x16_U
  _Mul_16x16_U
  L_end_Mul_16x16_S
  _Mul_16x16_S
  L_end_SDIV3232L
  _SDIV3232L
  L_end_COMFREM
  _COMFREM
  L_end_Div_32x32_S
  _Div_32x32_S
  L_end_Div_32x32_U
  _Div_32x32_U
  L_end_Mul_32x32_U
  _Mul_32x32_U
  L_end_Mul_32x32_S
  _Mul_32x32_S
  _CC2D_Loop1
  _CC2DL_Loop1
  L_loopCA2AWs
  L_loopCCA2AWs
  L_loopCS2Ss
  L_CS2Send
  L_loopCCS2Ss
  L_CCS2Send
  L_loopFZinSWs
  L_longjmp7
  L_end___CC2D
  ___CC2D
  L_end___CC2DW
  ___CC2DW
  L_end___CA2AW
  ___CA2AW
  L_end___CCA2AW
  ___CCA2AW
  L_end___CS2S
  ___CS2S
  L_end___CCS2S
  ___CCS2S
  L_end___FZinS
  ___FZinS
  L_end_____DoIFC
  _____DoIFC
  L_end_Swap
  _Swap
  L_end_setjmp
  _setjmp
  L_end_longjmp
  _longjmp
